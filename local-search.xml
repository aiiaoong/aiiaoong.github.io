<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>stl</title>
    <link href="/2022/02/28/stl/"/>
    <url>/2022/02/28/stl/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串string"><a href="#字符串string" class="headerlink" title="字符串string"></a>字符串string</h1><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造函数</span><br>string s1;<br><span class="hljs-function">string <span class="hljs-title">s2</span><span class="hljs-params">(s1)</span></span>;<br><span class="hljs-function">string <span class="hljs-title">s3</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;a&#x27;</span>)</span></span>;<br><span class="hljs-comment">//赋值操作</span><br>s1=<span class="hljs-string">&#x27;a&#x27;</span>;<br>s1=<span class="hljs-string">&quot;abcd&quot;</span>;<br>s2=s1;<br>s2=s1.<span class="hljs-built_in">assign</span>(s1);<br>s3=s2.<span class="hljs-built_in">assign</span>(s1,<span class="hljs-number">5</span>);<span class="hljs-comment">//前五个</span><br>s3.<span class="hljs-built_in">assign</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;x&#x27;</span>);<br><span class="hljs-comment">//字符串拼接</span><br>s2+=s1;<br>s3.<span class="hljs-built_in">append</span>(s2);<br>s3.<span class="hljs-built_in">append</span>(s2,<span class="hljs-number">6</span>);<span class="hljs-comment">//前六个</span><br>s3.<span class="hljs-built_in">append</span>(s1,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//从下表1开始3个字符</span><br><span class="hljs-comment">//字符串比较</span><br><span class="hljs-type">bool</span> cmp=s1.<span class="hljs-built_in">compare</span>(s2);<span class="hljs-comment">//大于零  等于零  小于零</span><br><span class="hljs-comment">//字符存取</span><br>cout&lt;&lt;s1[<span class="hljs-number">1</span>];<span class="hljs-comment">//输出第二个字符</span><br>cout&lt;&lt;s1.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>);<br><span class="hljs-comment">//字符串插入和删除</span><br>s1.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;666&quot;</span>);<br>s1.<span class="hljs-built_in">erase</span>(<span class="hljs-number">6</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//删除从第六个位置开始的3个字符</span><br><span class="hljs-comment">//字符串的字串</span><br>string s = <span class="hljs-string">&quot;hello@sina.com&quot;</span>;<br><span class="hljs-type">int</span> n = s.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;@&quot;</span>),pos=<span class="hljs-number">0</span>;<br>string username = s.<span class="hljs-built_in">substr</span>(pos, n);<span class="hljs-comment">//返回由pos开始的n个字符的字符串</span><br><br></code></pre></td></tr></table></figure><h1 id="动态数组vector"><a href="#动态数组vector" class="headerlink" title="动态数组vector"></a>动态数组vector</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造函数</span><br>vector&lt;<span class="hljs-type">int</span>&gt;v;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">v1</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">v2</span>(v1);<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">v3</span>(<span class="hljs-number">100</span>);<span class="hljs-comment">//默认赋值为0</span><br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">v4</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//赋值操作</span><br>v = v1;<br>v.<span class="hljs-built_in">assign</span>(v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>());<br><br><span class="hljs-comment">//容量和大小</span><br><span class="hljs-keyword">if</span> (v4.<span class="hljs-built_in">empty</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;v4为空&quot;</span> &lt;&lt; endl;<br>&#125; <br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;v4不为空&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;v4的容量 = &quot;</span> &lt;&lt; v1.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;v4的大小 = &quot;</span> &lt;&lt; v1.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br>v1.<span class="hljs-built_in">resize</span>(<span class="hljs-number">15</span>,<span class="hljs-number">10</span>);<span class="hljs-comment">//若指定的更大，默认用0填充新位置</span><br>v1.<span class="hljs-built_in">resize</span>(<span class="hljs-number">5</span>);<span class="hljs-comment">//若指定的更小，超出部分元素被删除</span><br><br><span class="hljs-comment">//插入和删除</span><br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">666</span>);<br>v.<span class="hljs-built_in">pop_back</span>();<br>v.<span class="hljs-built_in">insert</span>(v.<span class="hljs-built_in">begin</span>(),<span class="hljs-number">888</span>);<br>v.<span class="hljs-built_in">insert</span>(v.<span class="hljs-built_in">begin</span>(),<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>());<br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>());<br>v.<span class="hljs-built_in">clear</span>();<br><br><span class="hljs-comment">//数据存取</span><br>cout&lt;&lt;v.<span class="hljs-built_in">front</span>()&lt;&lt;v.<span class="hljs-built_in">back</span>()&lt;&lt;v[<span class="hljs-number">1</span>]&lt;&lt;v.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>)&lt;&lt;endl;<br><br><span class="hljs-comment">//互换容器</span><br>v1.<span class="hljs-built_in">swap</span>(v2);<span class="hljs-comment">//将v1与v2的元素互换</span><br><br></code></pre></td></tr></table></figure><h1 id="链表list"><a href="#链表list" class="headerlink" title="链表list"></a>链表list</h1><p>l优点：采用动态存储分配，不会造成内存浪费和溢出，执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</p><p>缺点：链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</p><p>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">//构造与赋值</span><br>list&lt;<span class="hljs-type">int</span>&gt;L1;<br>list&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">L2</span>(L1.<span class="hljs-built_in">begin</span>(),L1.<span class="hljs-built_in">end</span>());<br>list&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">L3</span>(L2);<br>list&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">L4</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1000</span>);<br><br>L2 = L1;<br>L3.<span class="hljs-built_in">assign</span>(L2.<span class="hljs-built_in">begin</span>(), L2.<span class="hljs-built_in">end</span>());<br>L4.<span class="hljs-built_in">assign</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br>L1.<span class="hljs-built_in">swap</span>(L2);<br><br><span class="hljs-comment">//容量和大小</span><br><span class="hljs-keyword">if</span> (L1.<span class="hljs-built_in">empty</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;L1为空&quot;</span> &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;L1不为空&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;L1的大小为： &quot;</span> &lt;&lt; L1.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br><br>L1.<span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>);<br>L1.<span class="hljs-built_in">resize</span>(<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//插入和删除</span><br>list&lt;<span class="hljs-type">int</span>&gt; L;<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>L.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">100</span>);<br><br>L.<span class="hljs-built_in">pop_back</span>();<br>L.<span class="hljs-built_in">pop_front</span>();<br><br>list&lt;<span class="hljs-type">int</span>&gt;::iterator it = L.<span class="hljs-built_in">begin</span>();<br>L.<span class="hljs-built_in">insert</span>(++it, <span class="hljs-number">1000</span>);<br>L.<span class="hljs-built_in">erase</span>(it);<br><br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10000</span>);<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10000</span>);<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10000</span>);<br>L.<span class="hljs-built_in">remove</span>(<span class="hljs-number">10000</span>);<span class="hljs-comment">///删除容器中所有与elem值匹配的元素</span><br><br>L.<span class="hljs-built_in">clear</span>();<br><br><span class="hljs-comment">//数据存取</span><br>cout &lt;&lt; <span class="hljs-string">&quot;第一个元素为： &quot;</span> &lt;&lt; L1.<span class="hljs-built_in">front</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;最后一个元素为： &quot;</span> &lt;&lt; L1.<span class="hljs-built_in">back</span>() &lt;&lt; endl;<br><br><span class="hljs-comment">//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据</span><br><br><span class="hljs-comment">//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据</span><br><br><span class="hljs-comment">//list容器的迭代器是双向迭代器，不支持随机访问</span><br><br>list&lt;<span class="hljs-type">int</span>&gt;::iterator it = L1.<span class="hljs-built_in">begin</span>();<br><span class="hljs-comment">//it = it + 1;//错误，不可以跳跃访问，即使是+1</span><br><br><span class="hljs-comment">//反转和排序</span><br><br>L.<span class="hljs-built_in">reverse</span>();<br>L.<span class="hljs-built_in">sort</span>(); <span class="hljs-comment">//默认的排序规则 从小到大</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)</span> </span>&#123;<span class="hljs-keyword">return</span> v1 &gt; v2;&#125;<br>L.<span class="hljs-built_in">sort</span>(myCompare); <span class="hljs-comment">//指定规则，从大到小</span><br></code></pre></td></tr></table></figure><h1 id="队列queue"><a href="#队列queue" class="headerlink" title="队列queue"></a>队列queue</h1><ul><li>入队   — push</li><li>出队   — pop</li><li>返回队头元素   — front</li><li>返回队尾元素   — back</li><li>判断队是否为空   — empty</li><li>返回队列大小   — size</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造函数</span><br>queue&lt;Person&gt; q;<br><span class="hljs-function">queue&lt;Person&gt; <span class="hljs-title">p</span><span class="hljs-params">(q)</span></span>;<br><span class="hljs-comment">//数据存取  大小操作</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">1000</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">900</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;沙僧&quot;</span>, <span class="hljs-number">800</span>)</span></span>;<br><br>q.<span class="hljs-built_in">push</span>(p1);<br>q.<span class="hljs-built_in">push</span>(p2);<br>q.<span class="hljs-built_in">push</span>(p3);<br>q.<span class="hljs-built_in">push</span>(p4);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;队列大小为：&quot;</span> &lt;&lt; q.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<span class="hljs-comment">//队列不提供迭代器，更不支持随机访问</span><br><span class="hljs-comment">//输出队头元素</span><br>cout &lt;&lt; <span class="hljs-string">&quot;队头元素-- 姓名： &quot;</span> &lt;&lt; q.<span class="hljs-built_in">front</span>().m_Name <br>             &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span>&lt;&lt; q.<span class="hljs-built_in">front</span>().m_Age &lt;&lt; endl;<br>             <br>cout &lt;&lt; <span class="hljs-string">&quot;队尾元素-- 姓名： &quot;</span> &lt;&lt; q.<span class="hljs-built_in">back</span>().m_Name  <br>             &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; q.<span class="hljs-built_in">back</span>().m_Age &lt;&lt; endl;<br><br>cout &lt;&lt; endl;<br>q.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//弹出队头元素</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="栈stack"><a href="#栈stack" class="headerlink" title="栈stack"></a>栈stack</h1><ul><li>入栈   — push</li><li>出栈   — pop</li><li>返回栈顶   — top</li><li>判断栈是否为空   — empty</li><li>返回栈大小   — size</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造函数</span><br>stack&lt;<span class="hljs-type">int</span>&gt; st;<br><span class="hljs-function">stack&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">st1</span><span class="hljs-params">(st)</span></span>;<br><br><span class="hljs-comment">//数据存取//大小操作</span><br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;栈的大小为：&quot;</span> &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br><span class="hljs-keyword">while</span> (!s.<span class="hljs-built_in">empty</span>()) &#123;<br><span class="hljs-comment">//输出栈顶元素</span><br>cout &lt;&lt; <span class="hljs-string">&quot;栈顶元素为： &quot;</span> &lt;&lt; s.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br><span class="hljs-comment">//弹出栈顶元素</span><br>s.<span class="hljs-built_in">pop</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="集合set-multiset"><a href="#集合set-multiset" class="headerlink" title="集合set/multiset"></a>集合set/multiset</h1><p>所有元素都会在插入时自动被排序</p><p><strong>区别：</strong></p><ul><li>set不可以插入重复数据，而multiset可以</li><li>set插入数据的同时会返回插入结果，表示插入是否成功</li><li>multiset不会检测数据，因此可以插入重复数据</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造和赋值</span><br>set&lt;<span class="hljs-type">int</span>&gt;st, st1;<br>set&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">st2</span>(st);<br>st1 = st2;<br><br><span class="hljs-comment">//插入和删除</span><br>st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">5</span>);<br>st.<span class="hljs-built_in">itsert</span>(<span class="hljs-number">0</span>);<br>st.<span class="hljs-built_in">erase</span>(st.<span class="hljs-built_in">begin</span>());<br>st.<span class="hljs-built_in">erase</span>(st.<span class="hljs-built_in">begin</span>(), st.<span class="hljs-built_in">end</span>());<br>st.<span class="hljs-built_in">erase</span>(<span class="hljs-number">0</span>);<br>st.<span class="hljs-built_in">clear</span>();<br><br><span class="hljs-comment">//大小和交换</span><br><span class="hljs-keyword">if</span> (!st.<span class="hljs-built_in">empty</span>())<br>cout &lt;&lt; st.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>st.<span class="hljs-built_in">swap</span>(st1);<br><br><span class="hljs-comment">//查找和统计</span><br>set&lt;<span class="hljs-type">int</span>&gt;::iterator pos = s1.<span class="hljs-built_in">find</span>(<span class="hljs-number">30</span>);<br><span class="hljs-comment">//存在返回该键的元素的迭代器；不存在返回set.end();</span><br><span class="hljs-keyword">if</span> (pos != s1.<span class="hljs-built_in">end</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到了元素 ： &quot;</span> &lt;&lt; *pos &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;未找到元素&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-type">int</span> num = s1.<span class="hljs-built_in">count</span>(<span class="hljs-number">30</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;出现次数 = &quot;</span> &lt;&lt; num &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h1 id="映射map-multimap"><a href="#映射map-multimap" class="headerlink" title="映射map/multimap"></a>映射map/multimap</h1><p>​    对组pair</p><ul><li><p>成对出现的数据，利用对组可以返回两个数据</p></li><li><p><code>pair&lt;type, type&gt; p ( value1, value2 );</code></p></li><li><p><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//对组创建</span><br><span class="hljs-function">pair&lt;string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(string(<span class="hljs-string">&quot;Tom&quot;</span>), <span class="hljs-number">20</span>)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt;  p.first &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p.second &lt;&lt; endl;<br><br>pair&lt;string, <span class="hljs-type">int</span>&gt; p2 = <span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">10</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p2.first &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p2.second &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure><ul><li><p>map中所有元素都是pair</p></li><li><p>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</p></li><li><p>所有元素都会根据元素的键值自动排序</p></li><li><p>可以根据key值快速找到value值</p></li><li><p><strong>map中所有元素都是成对出现，插入数据时候要使用对组</strong></p></li></ul><p><strong>区别：</strong></p><p>map不允许容器中有重复key值元素；multimap允许容器中有重复key值元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造和赋值</span><br>map&lt;string, <span class="hljs-type">int</span>&gt;mp;<br><br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">10</span>));<br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-number">20</span>));<br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;小刚&quot;</span>, <span class="hljs-number">30</span>));<br><br>map&lt;string, <span class="hljs-type">int</span>&gt;<span class="hljs-built_in">mp1</span>(mp);<br><br>map&lt;string, <span class="hljs-type">int</span>&gt;mp2;<br>mp2 = mp1;<br><br><span class="hljs-comment">//大小和交换</span><br><span class="hljs-keyword">if</span> (mp.<span class="hljs-built_in">empty</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;m为空&quot;</span> &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;m不为空&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;m的大小为： &quot;</span> &lt;&lt; m.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br>mp.<span class="hljs-built_in">swap</span>(mp1);<br><br><span class="hljs-comment">//插入和删除</span><br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;小芳&quot;</span>, <span class="hljs-number">40</span>));<br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;小光&quot;</span>, <span class="hljs-number">50</span>));<br>mp[<span class="hljs-string">&quot;小花&quot;</span>] = <span class="hljs-number">60</span>;<br><br>m.<span class="hljs-built_in">erase</span>(m.<span class="hljs-built_in">begin</span>());<br>m.<span class="hljs-built_in">erase</span>(<span class="hljs-number">10</span>);<br><br>m.<span class="hljs-built_in">erase</span>(m.<span class="hljs-built_in">begin</span>(), m.<span class="hljs-built_in">end</span>());<br>m.<span class="hljs-built_in">clear</span>();<br><br><span class="hljs-comment">//查找和统计</span><br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::iterator pos = mp.<span class="hljs-built_in">find</span>(<span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">if</span> (pos != mp.<span class="hljs-built_in">end</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到了元素 key = &quot;</span> &lt;&lt; (*pos).first <br>&lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; (*pos).second &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;未找到元素&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-type">int</span> num = mp.<span class="hljs-built_in">count</span>(<span class="hljs-number">30</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure><h1 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h1><h2 id="1-遍历"><a href="#1-遍历" class="headerlink" title="1.遍历"></a>1.遍历</h2><h3 id="for-each"><a href="#for-each" class="headerlink" title="for_each"></a>for_each</h3><p>实现遍历容器</p><p><code>for_each(iterator beg, iterator end, _func);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print01</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">print02</span> &#123;<br> <span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//for_each算法基本用法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-comment">//遍历算法</span><br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), print01);<br>cout &lt;&lt; endl;<br>    <br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">print02</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><h2 id="2-查找"><a href="#2-查找" class="headerlink" title="2.查找"></a>2.查找</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>利用find可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p><p><code>find(iterator beg, iterator end, value);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//查找容器中是否有 5 这个元素</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = <span class="hljs-built_in">find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h3 id="find-if"><a href="#find-if" class="headerlink" title="find_if"></a>find_if</h3><p>find_if按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p><code>find_if(iterator beg, iterator end, _Pred);  </code></p><h3 id="adjacent-find"><a href="#adjacent-find" class="headerlink" title="adjacent_find"></a>adjacent_find</h3><p>查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p><p><code>adjacent_find(iterator beg, iterator end);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = <span class="hljs-built_in">adjacent_find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> (it == v.<span class="hljs-built_in">end</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找不到!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到相邻重复元素为:&quot;</span> &lt;&lt; *it &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="binary-search"><a href="#binary-search" class="headerlink" title="binary_search"></a>binary_search</h3><p>查找指定元素是否存在，查找指定的元素，查到 返回true  否则false，在<strong>无序序列中不可用</strong></p><p><code>bool binary_search(iterator beg, iterator end, value);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">bool</span> ret = <span class="hljs-built_in">binary_search</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(),<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span> (ret)&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到了&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>统计元素出现次数</p><p><code>count(iterator beg, iterator end, value);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> num = <span class="hljs-built_in">count</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">4</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;4的个数为： &quot;</span> &lt;&lt; num &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="count-if"><a href="#count-if" class="headerlink" title="count_if"></a>count_if</h3><p>按条件统计元素个数</p><p><code>count_if(iterator beg, iterator end, _Pred);  </code></p><h2 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>排序</p><p><code>sort(iterator beg, iterator end, _Pred);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//sort默认从小到大排序</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br><br><span class="hljs-comment">//从大到小排序</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), cmp);<br><br>cout &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>容器元素合并，并存储到另一容器中,两个容器必须是<strong>有序的</strong></p><p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator destination);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vtarget</span><span class="hljs-params">(v1.size() + v2.size())</span></span>;<br><span class="hljs-comment">//合并  需要两个有序序列</span><br><span class="hljs-built_in">merge</span>(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), vtarget.<span class="hljs-built_in">begin</span>());<br></code></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>将容器内元素进行反转</p><p><code>reverse(iterator beg, iterator end);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="4-拷贝和替换算法"><a href="#4-拷贝和替换算法" class="headerlink" title="4.拷贝和替换算法"></a>4.拷贝和替换算法</h2><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>容器内指定范围的元素拷贝到另一容器中</p><p><code>copy(iterator beg, iterator end, iterator dest);  </code></p><p> dest目标起始迭代器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; v1;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v1.<span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(v1.size())</span></span>;<br><span class="hljs-built_in">copy</span>(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), v2.<span class="hljs-built_in">begin</span>());<br><br></code></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>将容器内指定范围的旧元素修改为新元素</p><p><code>replace(iterator beg, iterator end, oldvalue, newvalue);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;替换前：&quot;</span> &lt;&lt; endl;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;替换后：&quot;</span> &lt;&lt; endl;<span class="hljs-comment">//将容器中的20 替换成 2000</span><br><span class="hljs-built_in">replace</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">20</span>, <span class="hljs-number">2000</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure><h3 id="replace-if"><a href="#replace-if" class="headerlink" title="replace_if"></a>replace_if</h3><p>将区间内满足条件的元素，替换成指定元素</p><p><code>replace_if(iterator beg, iterator end, _pred, newvalue);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReplaceGreater30</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span>&#123;<br><span class="hljs-keyword">return</span> val &gt;= <span class="hljs-number">30</span>;<br>&#125;<br>&#125;;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;替换前：&quot;</span> &lt;&lt; endl;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><span class="hljs-comment">//将容器中大于等于的30 替换成 3000</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;替换后：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">replace_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">ReplaceGreater30</span>(), <span class="hljs-number">3000</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>互换两个容器的元素</p><p><code>swap(container c1, container c2);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v1.<span class="hljs-built_in">push_back</span>(i);<br>v2.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">100</span>);<br>&#125;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换前： &quot;</span> &lt;&lt; endl;<br>for_each(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>for_each(v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换后： &quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">swap</span>(v1, v2);<br>for_each(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>for_each(v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="5-常用算术生成算法"><a href="#5-常用算术生成算法" class="headerlink" title="5.常用算术生成算法"></a>5.常用算术生成算法</h2><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h3><p>计算区间内 容器元素累计总和</p><p><code>accumulate(iterator beg, iterator end, value);  </code>// value 起始值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-type">int</span> total = <span class="hljs-built_in">accumulate</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;total = &quot;</span> &lt;&lt; total &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>向容器中填充指定的元素</p><p><code>fill(iterator beg, iterator end, value);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-built_in">fill</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">100</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="6-常用集合算法"><a href="#6-常用集合算法" class="headerlink" title="6. 常用集合算法"></a>6. 常用集合算法</h2><h3 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set_intersection"></a>set_intersection</h3><p>求交集的两个集合必须是<strong>有序序列</strong></p><p>目标容器开辟空间需要从<strong>两个容器中取小值</strong></p><p>set_intersection返回值既是交集中最后一个元素的位置</p><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>   &#123;<br>v1.<span class="hljs-built_in">push_back</span>(i);<br>v2.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">5</span>);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; vTarget;<span class="hljs-comment">//取两个里面较小的值给目标容器开辟空间</span><br>vTarget.<span class="hljs-built_in">resize</span>(<span class="hljs-built_in">min</span>(v1.<span class="hljs-built_in">size</span>(), v2.<span class="hljs-built_in">size</span>()));<br><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd = <span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br>   <span class="hljs-built_in">set_intersection</span>(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br><br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure><h3 id="set-union"><a href="#set-union" class="headerlink" title="set_union"></a>set_union</h3><p>求并集的两个集合必须的有序序列</p><p>目标容器开辟空间需要<strong>两个容器相加</strong></p><p>set_union返回值既是并集中最后一个元素的位置</p><p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v1.<span class="hljs-built_in">push_back</span>(i);<br>v2.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">5</span>);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; vTarget;<br><span class="hljs-comment">//取两个容器的和给目标容器开辟空间</span><br>vTarget.<span class="hljs-built_in">resize</span>(v1.<span class="hljs-built_in">size</span>() + v2.<span class="hljs-built_in">size</span>());<br><br><span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd = <br>       <span class="hljs-built_in">set_union</span>(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br><br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure><h3 id="set-difference"><a href="#set-difference" class="headerlink" title="set_difference"></a>set_difference</h3><p>求差集的两个集合必须的有序序列</p><p>目标容器开辟空间需要从<strong>两个容器取较大值</strong></p><p>set_difference返回值既是差集中最后一个元素的位置</p><p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v1.<span class="hljs-built_in">push_back</span>(i);<br>v2.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">5</span>);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; vTarget;<br><span class="hljs-comment">//取两个里面较大的值给目标容器开辟空间</span><br>vTarget.<span class="hljs-built_in">resize</span>( <span class="hljs-built_in">max</span>(v1.<span class="hljs-built_in">size</span>() , v2.<span class="hljs-built_in">size</span>()));<br><br><span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;v1与v2的差集为： &quot;</span> &lt;&lt; endl;<br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd = <br>       <span class="hljs-built_in">set_difference</span>(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;v2与v1的差集为： &quot;</span> &lt;&lt; endl;<br>itEnd = <span class="hljs-built_in">set_difference</span>(v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第二篇博客！！！！！</title>
    <link href="/2022/02/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <url>/2022/02/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2022/02/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/02/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
