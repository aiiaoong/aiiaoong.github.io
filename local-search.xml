<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript 入门</title>
    <link href="/2022/04/10/JavaScript/"/>
    <url>/2022/04/10/JavaScript/</url>
    
    <content type="html"><![CDATA[<h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="编程基础-1"><a href="#编程基础-1" class="headerlink" title="编程基础"></a>编程基础</h3><p><strong>「计算机语言」</strong>分为机器语言，汇编语言，高级语言。计算机内部最终执行的都是机器语言，由<code>0</code>和<code>1</code>这样的二进制数构成。</p><p><strong>「数据存储单位」</strong>8bit(比特) = 1B(Byte)字节  千字节1KB = 1024B</p><p><strong>「翻译器」</strong>高级语言编写的程序不能被计算机识别，需要经过转换，将源代码程序翻译成<code>机器语言</code>才能运行。浏览器里面的js解释器就是这样的一个翻译器。</p><p><strong>「程序运行」</strong></p><ul><li>打开某个程序时，先从硬盘中把程序的代码加载到内存中</li><li>CPU执行内存中的代码</li><li>注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）</li></ul><h3 id="初识JavaScript"><a href="#初识JavaScript" class="headerlink" title="初识JavaScript"></a>初识JavaScript</h3><p><strong>「创始人」</strong>布兰登·艾奇(Brendan Eich),起初命名为<code>LiveScript</code>后来与Sun公司合作改名为<code>JavaScript</code>。</p><p><strong>「JavaScript」</strong>运行在客户端的脚本语言，不需要编译，由js解释器(js引擎)逐行解释执行。Node.js也可以用于服务器端编程。</p><p><strong>「JavaScript组成」</strong>ECMAScript(JavaScript语法)、DOM(文档对象模型)、BOM(浏览器对象模型)</p><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">JavaScript的作用<br></code></pre></td></tr></table></figure><ul><li>表单动态校验(密码强度检测)</li><li>网页特效</li><li>服务端开发(Node.js)</li><li>桌面程序(Electron)、App(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)</li></ul><p><strong>「JavaScript书写位置」</strong></p><blockquote><p>JS有3种书写位置，分别为行内、内嵌和外部。</p></blockquote><ol><li>行内式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我试试&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;Hello World&#x27;)&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>内嵌式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello  World~!&#x27;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>外部式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">引用外部js文件<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;my.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>「注释」</strong></p><ol><li>单行注释</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">// 我是单行注释 (快捷键 ctrl + / )<br></code></pre></td></tr></table></figure><ol><li>多行注释</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">/*<br>  获取用户年龄和姓名<br>  并通过提示框显示出来<br>  点击vscode左下角管理-键盘快捷方式-切换块注释<br>  (默认快捷键 alt + shift + a) 修改为 (ctrl + shift + /)<br>*/<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h3><p><strong>「变量」</strong>是程序在内存中申请的一块用于存放数据的空间。变量是用于存放数据的容器，可以通过变量名获取数据，甚至修改数据。</p><h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><p><strong>「1. 声明变量」</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">// 1.声明变量<br>var num; // 声明一个 名称为 num 的变量<br></code></pre></td></tr></table></figure><p>var是一个JS关键字，用来声明变量(variable变量的意思)。num是我们定义的变量名，可以通过变量名来访问内存中分配的空间。</p><p><strong>「2. 赋值」</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">num = 10;//给 num 这个变量赋值为 10<br></code></pre></td></tr></table></figure><p><strong>「3. 变量的初始化」</strong></p><p>声明一个变量并赋值， 我们称之为变量的初始化。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">10</span>;<span class="hljs-comment">//声明变量并赋值为10 </span><br></code></pre></td></tr></table></figure><p><strong>「4. 变量语法扩展」</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">// 1.一个变量被重新赋值后，它原有的值会被覆盖掉，变量值以最后一次赋的值为准。<br>var num = 10;<br>num = 11;<br>// 2.同时声明多个变量(只需要写一个var,多个变量名之间用英文逗号隔开)<br>var num = 10, age = 15, name = &#x27;fan&#x27;;<br></code></pre></td></tr></table></figure><p>声明变量特殊情况</p><table><thead><tr><th align="center">情况</th><th align="center">说明</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">var  age ; console.log (age);</td><td align="center">只声明 不赋值</td><td align="center">undefined</td></tr><tr><td align="center">console.log(age)</td><td align="center">不声明 不赋值  直接使用</td><td align="center">报错</td></tr><tr><td align="center">age  = 10; console.log (age);</td><td align="center">不声明  只赋值</td><td align="center">10</td></tr></tbody></table><p><strong>「5. 变量命名规范」</strong><img src="D:\folder\public\img\image-20220410211618375.png" alt="image-20220410211618375"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>分为两类：简单数据类型(Number,String,Boolean,Undefined,Null)和复杂数据类型(object)。</p><table><thead><tr><th align="left">简单数据类型</th><th align="left">说明</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">Number</td><td align="left">数字型,包含整型值和浮点型值</td><td align="left">0</td></tr><tr><td align="left">String</td><td align="left">字符串型</td><td align="left">“”</td></tr><tr><td align="left">Boolean</td><td align="left">布尔值型</td><td align="left">false</td></tr><tr><td align="left">Undefined</td><td align="left">var a;声明了变量a但是没有赋值，此时a = undefined</td><td align="left">undefined</td></tr><tr><td align="left">Null</td><td align="left">var a = null;声明了变量a为空值</td><td align="left">null</td></tr></tbody></table><h3 id="Number数字型"><a href="#Number数字型" class="headerlink" title="Number数字型"></a>Number数字型</h3><p><strong>「数字型进制」</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-number">1</span>.在JS中八进制前面加<span class="hljs-number">0</span>，十六进制前面加 <span class="hljs-number">0</span>x<br>var num1 = <span class="hljs-number">07</span>;   <span class="hljs-regexp">//</span> 对应十进制的<span class="hljs-number">7</span><br><span class="hljs-regexp">//</span> <span class="hljs-number">2</span>.十六进制数字序列范围：<span class="hljs-number">0</span>~<span class="hljs-number">9</span>以及A~F<br> var num = <span class="hljs-number">0</span>xA;   <br></code></pre></td></tr></table></figure><p><strong>「数字型范围」</strong>JavaScript中的数值有最大值和最小值</p><ul><li>最大值:<code>Number.MAX_VALUE</code>，值为：1.7976931348623157e+308</li><li>最小值:<code>Number.MIN_VALUE</code>，值为：5e-32</li><li>特殊值：<code>Infinity</code> 无穷大 <code>-Infinity</code> 无穷小 <code>NaN</code> 代表一个非数字</li><li>isNaN():用来判断一个变量是否为非数字的类型。非数字型为true,数字型为false。</li></ul><h3 id="String字符串型"><a href="#String字符串型" class="headerlink" title="String字符串型"></a>String字符串型</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// 1.字符串型可以是引号中的任意文本，语法为 单引号 和 双引号</span><br><span class="hljs-keyword">var</span> msg = <span class="hljs-string">&#x27;我的名字叫&#x27;</span>;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;fan&quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>「1. 字符串转义符」</strong>都是以 \ 开头，详细如下👇👇</p><table><thead><tr><th align="left">转义符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">\n</td><td align="left">换行符，n是 newline 的意思</td></tr><tr><td align="left">\</td><td align="left">斜杆 \</td></tr><tr><td align="left">&#39;</td><td align="left">单引号 ‘</td></tr><tr><td align="left">&quot;</td><td align="left">双引号 “</td></tr><tr><td align="left">\t</td><td align="left">tab 缩进</td></tr><tr><td align="left">\b</td><td align="left">空格,b是 blank 的意思</td></tr></tbody></table><p><strong>「2. 字符串长度」</strong><br>  字符串是由若干字符组成的，这些字符的数量就是字符串的长度。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 1.字符串型可以是引号中的任意文本，语法为 单引号 和 双引号</span><br><span class="hljs-keyword">var</span> msg = <span class="hljs-string">&#x27;我是帅气的饭老板&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(msg.<span class="hljs-built_in">length</span>); <span class="hljs-comment">// 显示 8</span><br></code></pre></td></tr></table></figure><p><strong>「3. 字符串拼接」</strong><br>  多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串。<br>  拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1.1</span> 字符串 <span class="hljs-string">&quot;相加&quot;</span><br>alert(<span class="hljs-string">&#x27;hello&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;world&#x27;</span>); <span class="hljs-regexp">//</span> hello world<br><span class="hljs-regexp">//</span><span class="hljs-number">1.2</span> 数值字符串 <span class="hljs-string">&quot;相加&quot;</span><br>alert(<span class="hljs-string">&#x27;100&#x27;</span> + <span class="hljs-string">&#x27;100&#x27;</span>); <span class="hljs-regexp">//</span> <span class="hljs-number">100100</span><br><span class="hljs-regexp">//</span><span class="hljs-number">1.3</span> 数值字符串 + 数值<br>alert(<span class="hljs-string">&#x27;11&#x27;</span> + <span class="hljs-number">12</span>);     <span class="hljs-regexp">//</span> <span class="hljs-number">1112</span> +号口诀：数值相加，字符相连<br><span class="hljs-regexp">//</span> <span class="hljs-number">1.4</span> 字符串拼接加强<br>var age = <span class="hljs-number">18</span>;<br>alert(<span class="hljs-string">&quot;饭老板今年&quot;</span> + age +<span class="hljs-string">&quot;岁了&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="布尔型Boolean"><a href="#布尔型Boolean" class="headerlink" title="布尔型Boolean"></a>布尔型Boolean</h3><p>  布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。<br>  布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">true</span> + <span class="hljs-number">1</span>) <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">false</span> + <span class="hljs-number">1</span>) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h3><p>  一个变量声明后没有赋值会有一个默认值undefined</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">var</span> <span class="hljs-built_in">variable</span>;<br>console.<span class="hljs-keyword">log</span>(<span class="hljs-built_in">variable</span>); <span class="hljs-comment">// undefined</span><br>console.<span class="hljs-keyword">log</span>(<span class="hljs-string">&quot;你好&quot;</span> + <span class="hljs-built_in">variable</span>); <span class="hljs-comment">// 你好undefined</span><br>console.<span class="hljs-keyword">log</span>(<span class="hljs-number">11</span> + <span class="hljs-built_in">variable</span>); <span class="hljs-comment">// NaN</span><br>console.<span class="hljs-keyword">log</span>(<span class="hljs-literal">true</span> + <span class="hljs-built_in">variable</span>);<span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure><p>  一个变量声明并赋值null,里面存的值为空</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> var2 = <span class="hljs-literal">null</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(var2); <span class="hljs-comment">// null</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;你好&quot;</span> + var2); <span class="hljs-comment">// 你好null</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">11</span> + var2); <span class="hljs-comment">// 11</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">true</span> + var2);<span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="获取变量类型及转换"><a href="#获取变量类型及转换" class="headerlink" title="获取变量类型及转换"></a>获取变量类型及转换</h3><ul><li>检测变量的数据类型 <code>typeof</code></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> num)<span class="hljs-comment">//结果为 number</span><br></code></pre></td></tr></table></figure><ul><li><p><code>字面量</code>:是源代码中一个固定值的表示法，就是字面量如何去表达这个值。通过数据的格式特征可以判断数据的类型</p></li><li><ul><li>有数字字面量:8,9,10</li><li>字符串字面量:’饭老板’，”前端开发”</li><li>布尔字面量:true,false</li></ul></li></ul><p><strong>「数据类型转换」</strong></p><ul><li>转换为字符串</li></ul><table><thead><tr><th align="left">方式</th><th align="left">说明</th><th align="left">案例</th></tr></thead><tbody><tr><td align="left">toString()</td><td align="left">转成字符串</td><td align="left">var num=1; alert(num.toString())</td></tr><tr><td align="left">String()</td><td align="left">强制转换</td><td align="left">var num=1; alert(String(num))</td></tr><tr><td align="left"><strong>加号拼接字符串</strong></td><td align="left">和字符串拼接的结果都是字符串</td><td align="left">var num=1; alert(num+’我是字符串’)</td></tr></tbody></table><ul><li>转换为数字型</li></ul><table><thead><tr><th align="left">方式</th><th align="left">说明</th><th align="left">案例</th></tr></thead><tbody><tr><td align="left">parseInt(String)函数</td><td align="left">将string类型转成整数型</td><td align="left">parseInt(‘11’)</td></tr><tr><td align="left">parseFloat(String)函数</td><td align="left">将string类型转成浮点型</td><td align="left">parseFloat(‘11.2’)</td></tr><tr><td align="left">Number() 强制转换函数</td><td align="left">将string类型强制转换为数值型</td><td align="left">Number(‘12’)</td></tr><tr><td align="left"><strong>js隐式转换 ( - * /)</strong></td><td align="left">利用算数运算隐式转换为数值型</td><td align="left">‘12’ - 0</td></tr></tbody></table><ul><li>转换为布尔型<br>代表空、否定的值会被转换为false，如’’、0、NaN、null、undefined 其余值都会被转换为true</li></ul><table><thead><tr><th align="left">方式</th><th align="left">说明</th><th align="left">案例</th></tr></thead><tbody><tr><td align="left">Boolean()</td><td align="left">其他类型转换为布尔值</td><td align="left">Boolean(‘true’)</td></tr></tbody></table><h3 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h3><p><strong>「标识符」</strong>指开发人员为变量、属性、函数、参数取得名字。标识符不能是关键字或保留字。</p><p><strong>「关键字」</strong>指 JS本身已经使用了的字，不能再用它们充当变量名、方法名</p><blockquote><p>包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</p></blockquote><p><strong>「保留字」</strong>实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。</p><blockquote><p>boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。</p><p>注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</p></blockquote><hr><h2 id="运算符与流程控制"><a href="#运算符与流程控制" class="headerlink" title="运算符与流程控制"></a>运算符与流程控制</h2><h3 id="运算符-操作符"><a href="#运算符-操作符" class="headerlink" title="运算符(操作符)"></a>运算符(操作符)</h3><p><strong>「运算符」</strong>是用于实现赋值、比较和执行算数运算等功能的符号。常用运算符分类如下👇</p><ul><li>算数运算符</li><li>递增和递减运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><p><strong>「算数运算符」</strong></p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">案例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加</td><td align="left">10+20=30</td></tr><tr><td align="left">-</td><td align="left">减</td><td align="left">10-20=-10</td></tr><tr><td align="left">*</td><td align="left">乘</td><td align="left">10*20=200</td></tr><tr><td align="left">/</td><td align="left">除</td><td align="left">10/20=0.5</td></tr><tr><td align="left">%</td><td align="left">取余(取模)</td><td align="left">返回除法的余数9%2=1</td></tr></tbody></table><ul><li><p>浮点数的精度问题</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> result = <span class="hljs-number">0</span>.<span class="hljs-number">1</span> + <span class="hljs-number">0</span>.<span class="hljs-number">2</span>;    // 结果不是 <span class="hljs-number">0</span>.<span class="hljs-number">3</span>，而是：<span class="hljs-number">0</span>.<span class="hljs-number">30000000000000004</span><br><span class="hljs-attribute">console</span>.log(<span class="hljs-number">0</span>.<span class="hljs-number">07</span> * <span class="hljs-number">100</span>);   // 结果不是 <span class="hljs-number">7</span>，  而是：<span class="hljs-number">7</span>.<span class="hljs-number">000000000000001</span><br></code></pre></td></tr></table></figure></li><li><ul><li>浮点数值的最高精度是17位小数，但是在进行算数运算时其精确度远远不如整数,所以不要直接判断两个浮点数是否相等!</li></ul></li><li><p>表达式与返回值</p></li><li><ul><li>表达式：由数字、运算符和变量组成的式子。</li><li>返回值：每一个表达式经过相应的运算之后，会有一个最终结果，称为表达式的返回值</li></ul></li></ul><p><strong>「递增和递减运算符」</strong></p><p>  递增和递减运算符必须配合变量使用。</p><ul><li>递增运算符</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span>  <span class="hljs-built_in">num</span> = <span class="hljs-number">10</span>;<br>alert(++<span class="hljs-built_in">num</span> + <span class="hljs-number">10</span>);   <span class="hljs-comment">// 21 使用口诀：先自加，后返回值</span><br><br><span class="hljs-keyword">var</span>  num1 = <span class="hljs-number">10</span>;<br>alert(<span class="hljs-number">10</span> + num1++);  <span class="hljs-comment">// 20 使用口诀：先返回原值，后自加 </span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> num2 = ++<span class="hljs-built_in">num</span> + <span class="hljs-built_in">num</span>++; <span class="hljs-comment">//num = 2</span><br>console.log(num2);<span class="hljs-comment">//4</span><br><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> num2 = <span class="hljs-built_in">num</span>++ + num1++; <span class="hljs-comment">// 1 + 1</span><br>console.log(num2);<span class="hljs-comment">//2</span><br><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> num2 = <span class="hljs-built_in">num</span>++ + <span class="hljs-built_in">num</span>++;<span class="hljs-comment">// 1 + 2 </span><br>console.log(num2); <span class="hljs-comment">// 3  </span><br><br></code></pre></td></tr></table></figure><p><strong>「比较运算符」</strong></p><table><thead><tr><th align="center">运算符</th><th align="left">描述</th><th align="left">案例</th><th align="left">结果</th></tr></thead><tbody><tr><td align="center">&lt;</td><td align="left">小于号</td><td align="left">1&lt;2</td><td align="left">true</td></tr><tr><td align="center">&gt;</td><td align="left">大于号</td><td align="left">1&gt;2</td><td align="left">false</td></tr><tr><td align="center">&gt;=</td><td align="left">大于等于号(大于或者等于)</td><td align="left">2 &gt;= 2</td><td align="left">true</td></tr><tr><td align="center">&lt;=</td><td align="left">小于等于号(小于或者等于)</td><td align="left">3 &lt;= 2</td><td align="left">false</td></tr><tr><td align="center">==</td><td align="left">判等号(会转型)</td><td align="left">15 == ‘15’</td><td align="left">true</td></tr><tr><td align="center">!=</td><td align="left">不等号</td><td align="left">37 != 37</td><td align="left">false</td></tr><tr><td align="center">=== !===</td><td align="left">全等 全不等(要求值和数据类型都一致)</td><td align="left">37 === ‘37’</td><td align="left">false</td></tr></tbody></table><p><strong>「逻辑运算符」</strong><br>  逻辑运算符是用来进行布尔值运算的运算符<br>  短路运算:当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p><table><thead><tr><th align="center">运算符</th><th align="left">描述</th><th align="left">案例</th><th align="left">特点</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="left">“逻辑与”,简称”与” and</td><td align="left">true &amp;&amp; false</td><td align="left">两边都是 true才返回 true</td></tr><tr><td align="center">||</td><td align="left">“逻辑或”,简称”或” or</td><td align="left">true</td><td align="left">有真为真</td></tr><tr><td align="center">!</td><td align="left">“逻辑非”,简称”非” not</td><td align="left">!true</td><td align="left">取反</td></tr></tbody></table><p><strong>「赋值运算符」</strong></p><table><thead><tr><th align="center">运算符</th><th align="left">描述</th><th align="left">案例</th></tr></thead><tbody><tr><td align="center">=</td><td align="left">直接赋值</td><td align="left">var userName = ‘fan’</td></tr><tr><td align="center">+= -=</td><td align="left">加减一个数后再赋值</td><td align="left">var age=5; age+=5</td></tr><tr><td align="center">*= /= %=</td><td align="left">乘、除、取模后再赋值</td><td align="left">var age=5; age*=5</td></tr></tbody></table><p><strong>「运算符优先级」</strong></p><table><thead><tr><th align="center">优先级</th><th align="left">运算符</th><th align="left">顺序</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">小括号</td><td align="left">()</td></tr><tr><td align="center">2</td><td align="left">一元运算符</td><td align="left">! ++ –</td></tr><tr><td align="center">3</td><td align="left">算数运算符</td><td align="left">先* / % 后+ -</td></tr><tr><td align="center">4</td><td align="left">关系运算符</td><td align="left">&gt; &gt;= &lt; &lt;=</td></tr><tr><td align="center">5</td><td align="left">相等运算符</td><td align="left">== != === !==</td></tr><tr><td align="center">6</td><td align="left">逻辑运算符</td><td align="left">先&amp;&amp; 后||</td></tr><tr><td align="center">7</td><td align="left">赋值运算符</td><td align="left">=</td></tr><tr><td align="center">8</td><td align="left">逗号运算符</td><td align="left">,</td></tr></tbody></table><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p><strong>「流程控制」</strong>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。流程控制主要有三种结构，分别是<strong>顺序结构</strong>、<strong>分支结构</strong>和<strong>循环结构</strong>，代表三种代码执行的顺序。</p><p><strong>「分支流程控制」</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">  <span class="hljs-regexp">//</span> <span class="hljs-number">1</span>. 条件成立执行的代码语句<br>  <span class="hljs-keyword">if</span> (条件表达式) &#123; <br>  &#125;<br>  <br>  <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>.<span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> 语句<br>  <span class="hljs-keyword">if</span> (条件表达式) &#123;<br>      <span class="hljs-regexp">//</span> [如果] 条件成立执行的代码<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-regexp">//</span> [否则] 执行的代码<br>  &#125;<br>  <br>  <span class="hljs-regexp">//</span> <span class="hljs-number">3</span>. <span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> 语句(多分支语句)<br>  <span class="hljs-regexp">//</span> 适合于检查多重条件。<br>  <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;<br>      语句<span class="hljs-number">1</span>；<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>)  &#123;<br>      语句<span class="hljs-number">2</span>；<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">3</span>)  &#123;<br>     语句<span class="hljs-number">3</span>；<br>   ....<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-regexp">//</span> 上述条件都不成立执行此处代码<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>「三元表达式」</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">//如果表达式<span class="hljs-number">1</span>为 <span class="hljs-literal">true</span> ，则返回表达式<span class="hljs-number">2</span>的值，如果表达式<span class="hljs-number">1</span>为 <span class="hljs-literal">false</span>，则返回表达式<span class="hljs-number">3</span>的值<br>表达式<span class="hljs-number">1</span> ? 表达式<span class="hljs-number">2</span> : 表达式3;<br></code></pre></td></tr></table></figure><p><strong>「switch分支流程控制」</strong>它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">switch</span>( 表达式 )&#123; <br>    <span class="hljs-keyword">case</span> value1:<br>        <span class="hljs-comment">// 表达式 等于 value1 时要执行的代码</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> value2:<br>        <span class="hljs-comment">// 表达式 等于 value2 时要执行的代码</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-comment">// 表达式 不等于任何一个 value 时要执行的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环与代码规范"><a href="#循环与代码规范" class="headerlink" title="循环与代码规范"></a>循环与代码规范</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">初始化变量</td><td align="left">通常被用于初始化一个计数器,该表达式可以使用var关键字声明新的变量，这个变量帮我们来记录次数。</td></tr><tr><td align="left">条件表达式</td><td align="left">用于确定每一次循环是否能被执行，如果结果是true就继续循环，否则退出循环</td></tr><tr><td align="left">操作表达式</td><td align="left">每次循环的最后都要执行的表达式。通常用于更新计数器变量的值</td></tr></tbody></table><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">  <span class="hljs-built_in">for</span>(初始化变量; 条件表达式; 操作表达式 )&#123;<br>    <span class="hljs-comment">//循环体</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>「执行流程」</strong></p><ol><li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li><li>执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。</li><li>执行操作表达式,此时第一轮结束。</li><li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li><li>继续执行操作表达式，第二轮结束。……</li></ol><p><strong>「双重for循环」</strong>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs axapta">  <span class="hljs-keyword">for</span> (外循环的初始; 外循环的条件; 外循环的操作表达式) &#123;<br>    <span class="hljs-keyword">for</span> (内循环的初始; 内循环的条件; 内循环的操作表达式) &#123;  <br>       需执行的代码;<br>   &#125;<br>&#125;<br><span class="hljs-comment">//for循环打印九九乘法表</span><br>  <span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>      <span class="hljs-built_in">str</span> += j + <span class="hljs-string">&quot;x&quot;</span> + i + <span class="hljs-string">&quot;=&quot;</span> + j * i + <span class="hljs-string">&quot;\t&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">str</span> += <span class="hljs-string">&quot;\n&quot;</span>;<br>  &#125;<br>  console.log(<span class="hljs-built_in">str</span>);<br></code></pre></td></tr></table></figure><p><strong>「while循环」</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">while</span> (条件表达式) &#123;<br>    <span class="hljs-comment">// 循环体代码 </span><br>&#125;<br><span class="hljs-comment">// 1. 先执行条件表达式，如果结果为 true，则执行循环体代码；</span><br><span class="hljs-comment">//    如果为 false，则退出循环，执行后面代码</span><br><span class="hljs-comment">// 2. 执行循环体代码</span><br><span class="hljs-comment">// 3.  循环体代码执行完毕后，程序会继续判断执行条件表达式，</span><br><span class="hljs-comment">//计算1-100的累加和</span><br>  <span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>) &#123;<br>    <span class="hljs-built_in">sum</span> += i;<br>    i++;<br>  &#125;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>);<br></code></pre></td></tr></table></figure><p><strong>「do-while循环」</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span><br>&#125; <span class="hljs-keyword">while</span>(条件表达式);<br>    <span class="hljs-comment">// 先执行一次循环体代码，再执行条件表达式</span><br>    <span class="hljs-comment">//计算100以内的偶数累加和</span><br>      <span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-built_in">sum</span> += i;<br>        &#125;<br>        i++;<br>      &#125; <span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>);<br></code></pre></td></tr></table></figure><p><strong>「continue、break」</strong><br>  <code>continue</code> 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。<br>  <code>break</code> 关键字用于立即跳出整个循环（循环结束）。</p><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 标识符命名规范<br></code></pre></td></tr></table></figure><ul><li>变量、函数的命名必须要有意义</li><li>变量的名称一般用名词</li><li>函数的名称一般用动词</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">2.</span> 操作符规范<br><span class="hljs-comment">// 操作符的左右两侧各保留一个空格</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 直接退出整个 for 循环，跳到整个for循环下面的语句</span><br>  &#125;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我正在吃第&#x27;</span> + i + <span class="hljs-string">&#x27;个包子呢&#x27;</span>);<br>&#125;<br><span class="hljs-number">3.</span> 单行注释规范<br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 单行注释前面注意有个空格</span><br>  &#125;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我正在吃第&#x27;</span> + i + <span class="hljs-string">&#x27;个包子呢&#x27;</span>);<br>&#125;<br><span class="hljs-number">4.</span> 其他规范<br><span class="hljs-comment">//关键词 操作符空格</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;=<span class="hljs-number">10</span>; i++) &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="数组与函数"><a href="#数组与函数" class="headerlink" title="数组与函数"></a>数组与函数</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><strong>「1. 数组的概念」</strong> 一组数据的集合，其中的每个数据被称作<code>元素</code>，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。</p><p><strong>「2. 创建数组」</strong></p><ul><li>利用new关键字创建数组；</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> 数组名 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>([n]);<span class="hljs-comment">//[]代表可选 若写n，则代表数组的长度</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<span class="hljs-comment">//创建了一个名为 arr 的空数组</span><br></code></pre></td></tr></table></figure><ul><li>利用数组字面量创建数组</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-number">1</span>. 使用数组字面量方式创建空的数组<br>var 数组名 = [];<span class="hljs-regexp">//</span>若写n，则代表数组的长度<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>. 使用数组字面量方式创建带初始值的数组<br><span class="hljs-regexp">//</span><span class="hljs-number">3</span>. 声明数组并赋值称为数组的初始化<br>var arr =[<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>];<br>var arr2 = [<span class="hljs-string">&#x27;fan&#x27;</span>,true,<span class="hljs-number">17.5</span>];<span class="hljs-regexp">//</span>数组中可以存放任意类型的数据<br></code></pre></td></tr></table></figure><p><strong>「3. 访问数组元素」</strong><br>索引(下标):用来访问数组元素的序号。索引从 <code>0</code> 开始。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 定义数组<br>var arrStus = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-regexp">//</span> 获取数组中的第<span class="hljs-number">2</span>个元素 <br>alert(arrStus[<span class="hljs-number">1</span>]); <br><span class="hljs-regexp">//</span> 如果访问数组时没有和索引值对应的元素(数组越界)，<br><span class="hljs-regexp">//</span> 返回值为undefined<br></code></pre></td></tr></table></figure><p><strong>「4. 遍历数组」</strong><br>把数组中的元素从头到尾都访问一次。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 数组的长度,默认情况下等于元素的个数</span><br><span class="hljs-comment">// 当我们数组里面的元素发生了变化，length属性跟着一起变</span><br><span class="hljs-comment">// 如果设置的length属性值大于数组的元素个数，则会在数组末尾出现空白元素；</span><br><span class="hljs-comment">// 如果设置的length属性值小于数组的元素个数，则会把超过该值的数组元素删除</span><br> <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>];<br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr[i]);<br> &#125;<br> <br> arr.<span class="hljs-built_in">length</span> = <span class="hljs-number">2</span>;<br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<span class="hljs-comment">// red blue</span><br></code></pre></td></tr></table></figure><p><strong>「4. 数组中新增元素」</strong><br>数组中可以通过以下方式在数组的末尾插入新元素;</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 1. 数组[数组.length] = 新数据;</span><br>arr = [] <span class="hljs-comment">//arr.length = 0;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  arr[arr.<span class="hljs-built_in">length</span>] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br></code></pre></td></tr></table></figure><p><strong>「5. 案例」</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 1. 筛选数组 大于10的元素选出来放到新数组中</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = [];<br><span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; arr.length; i++)&#123;<br>  <span class="hljs-keyword">if</span> (arr[i] &gt;= <span class="hljs-number">10</span>) &#123;<br>    <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>[j] = arr[i];<br>    j++;<br>  &#125;<br>&#125;<br>console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>);<br><span class="hljs-comment">//第二种方法 利用数组长度的可变性</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; arr.length; i++)&#123;<br>  <span class="hljs-keyword">if</span> (arr[i] &gt;= <span class="hljs-number">10</span>) &#123;<br>    <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>[j] = arr[i];<br>    j++;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 2. 翻转数组 </span><br><span class="hljs-comment">//  把旧数组索引号第4个取过来（arr.length - 1)，给新数组索引号第0个元素 (newArr.length)</span><br><span class="hljs-comment">//  我们采取 递减的方式  i--</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;purple&#x27;</span>];<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = arr.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>;i--) &#123;<br>  <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>[<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>.length] = arr[i]<br>&#125;<br>console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>);<br><span class="hljs-comment">// 3. 数组转换为字符串 用&quot;|&quot; 或其他符号分割</span><br><span class="hljs-comment">// 需要一个新变量用于存放转换完的字符串str</span><br><span class="hljs-comment">//遍历取出数据加到str后面然后加上分隔符</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;purple&#x27;</span>];<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  str += arr[i] + <span class="hljs-string">&#x27;|&#x27;</span>;<br>&#125;<br>console.log(str);<br><span class="hljs-comment">// 4. 数组转换为字符串 用&quot;|&quot; 或其他符号分割</span><br><span class="hljs-comment">// 需要一个新变量用于存放转换完的字符串str</span><br><span class="hljs-comment">//遍历取出数据加到str后面然后加上分隔符</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;purple&#x27;</span>];<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  str += arr[i] + <span class="hljs-string">&#x27;|&#x27;</span>;<br>&#125;<br>console.log(str);<br></code></pre></td></tr></table></figure><p><code>冒泡排序</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; arr.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span> - i; j++) &#123;<br>      <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>])&#123;<br>        <span class="hljs-keyword">var</span> temp = arr[j];<br>        arr[j] = arr[j+<span class="hljs-number">1</span>];<br>        arr[j+<span class="hljs-number">1</span>] = temp;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">var</span> arr1 = <span class="hljs-built_in">sort</span>([<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>]); <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr1);<span class="hljs-comment">//1 2 4 9</span><br></code></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>「1. 函数的概念」</strong><br>封装了一段可被重复调用执行的代码块，通过函数可以实现大量代码的重复使用。函数是一种数据类型。</p><p><strong>「2. 函数的使用」</strong></p><ul><li>声明函数</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>. 通过<span class="hljs-keyword">function</span>关键字定义函数 -- 命名函数<br><span class="hljs-keyword">function</span> 函数名() &#123;<br>  <span class="hljs-regexp">//</span>函数体代码<br>&#125;<br><span class="hljs-regexp">//</span> <span class="hljs-number">1.1</span> <span class="hljs-keyword">function</span> 是声明函数的关键字，必须小写<br><span class="hljs-regexp">//</span> <span class="hljs-number">1.2</span> 函数名 命名为动词形式 例: getSum<br><br> <span class="hljs-number">2</span>. 通过函数表达式定义函数 ---匿名函数<br>var fn = <span class="hljs-keyword">function</span>() &#123;&#125;;<br><span class="hljs-regexp">//</span> <span class="hljs-number">2.1</span> fn是变量名，不是函数名<br><span class="hljs-regexp">//</span> <span class="hljs-number">2.2</span> fn是变量，只不过变量存储的是函数<br><span class="hljs-regexp">//</span> <span class="hljs-number">2.3</span> 函数表达式创建的函数可以通过 变量名(); 来调用<br><span class="hljs-regexp">//</span> <span class="hljs-number">2.4</span> 函数表达式也可以定义形参和调用传入实参。<br>匿名函数使用的第<span class="hljs-number">2</span>种方式--匿名函数自调用<br>(<span class="hljs-keyword">function</span>()&#123;<br>  alert(<span class="hljs-number">123</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><ul><li>调用函数</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">函数名();<span class="hljs-regexp">//</span> 函数声明后调用才会执行函数体代码<br></code></pre></td></tr></table></figure><ul><li><p>函数的封装</p></li><li><ul><li>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口。</li></ul></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  例用封装函数计算1-100累加和</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">var</span> sumNum = <span class="hljs-number">0</span>; <span class="hljs-comment">// 准备一个变量，保存累加和</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>  sumNum += i; <span class="hljs-comment">// 把每个数值 都累加 到变量中</span><br>&#125;<br>  alert(sumNum);<br>&#125;<br><span class="hljs-comment">// 调用函数</span><br>getSum();<br></code></pre></td></tr></table></figure><p><strong>「3. 函数的参数」</strong></p><ul><li>形参：函数定义时候，传递的参数(实参值传递给形参,不用声明的变量)</li><li>实参：函数调用时候，传递的参数</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>带参数的函数声明<br><span class="hljs-keyword">function</span> 函数名(形参<span class="hljs-number">1</span>,形参<span class="hljs-number">2</span>,形参<span class="hljs-number">3</span>...) &#123;<br>  <span class="hljs-regexp">//</span>函数体<br>&#125;<br><span class="hljs-regexp">//</span> 带参数的函数调用<br>函数名(实参<span class="hljs-number">1</span>,实参<span class="hljs-number">2</span>,实参<span class="hljs-number">3</span>...);<br></code></pre></td></tr></table></figure><ul><li><strong>「函数形参和实参数量不匹配时」</strong></li></ul><table><thead><tr><th align="left">参数个数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">实参个数等于形参个数</td><td align="left">输出正确结果</td></tr><tr><td align="left">实参个数多于形参个数</td><td align="left">只取到形参的个数</td></tr><tr><td align="left">实参个数小于形参</td><td align="left">多的形参定义为undefined,结果为NaN</td></tr></tbody></table><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> get<span class="hljs-constructor">Sum(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>)</span> &#123;<br>  return a + b + c;<br>&#125;<br><span class="hljs-comment">// js中形参的默认值是undefined。</span><br><span class="hljs-comment">// 调用函数</span><br>var n = get<span class="hljs-constructor">Sum(1, 2)</span>;<span class="hljs-comment">// n = NaN</span><br>var n = get<span class="hljs-constructor">Sum(1, 2, 3, 4)</span>; <span class="hljs-comment">//1 + 2 +3 = 6</span><br></code></pre></td></tr></table></figure><p><strong>「4. 函数的返回值」</strong><br>  返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">  <span class="hljs-regexp">//</span> 声明函数<br>  <span class="hljs-keyword">function</span> 函数名() &#123;<br>    ...<br>    return 需要返回的值;<br>    <span class="hljs-regexp">//</span> <span class="hljs-number">1</span>. 函数遇到return会停止执行，并返回指定的值<br>    <span class="hljs-regexp">//</span> <span class="hljs-number">1</span>. 如果函数没有return 返回的值是undefined<br>  &#125;<br>  <span class="hljs-regexp">//</span> 调用函数<br>  函数名(); <span class="hljs-regexp">//</span>此时调用函数就可以得到函数体内return的值<br><span class="hljs-keyword">break</span>,<span class="hljs-keyword">continue</span>,return的区别<br></code></pre></td></tr></table></figure><ul><li>break: 结束当前的循环体 (如for、while)</li><li>continue: 跳出本次循环，继续执行下次循环</li><li>return: 不仅可以退出<code>(函数体内)</code>循环，还能够返回return语句中的值，同时还可以<code>结束当前的函数体内的代码</code></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//避免踩坑 return只能结束函数体内的代码</span><br>  function <span class="hljs-built_in">breakDown</span>() &#123;<br>    for (var i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>      if (i == <span class="hljs-number">5</span>) &#123;<br>        return <span class="hljs-number">1</span>;<br>      &#125;<br>    console<span class="hljs-selector-class">.log</span>(i);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">breakDown</span>();<br>  <br>  <span class="hljs-comment">//避免踩坑2 函数如果有return 则返回的是 return 后面的值；</span><br>  <span class="hljs-comment">// return d,a,b; 返回的是b的值</span><br>  <span class="hljs-comment">//如果函数没有 return语句，则返回undefined</span><br><br></code></pre></td></tr></table></figure><p><strong>「5. arguments的使用」</strong><br>  当不确定有多少个参数传递的时候，可以用 arguments 来获取。JS中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。</p><ul><li><p>伪数组具有以下特点：</p></li><li><ul><li>具有length属性</li><li>按索引方式存储数据</li><li>不具有数组的push，pop等方法</li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arcade"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-comment">//arguments 里面存储了所有传递过来的实参</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arguments);<span class="hljs-comment">// [1,2,3...]</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arguments[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 2</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arguments.<span class="hljs-built_in">length</span>); <span class="hljs-comment">// 3</span><br>   <br>   <span class="hljs-comment">//我们可以按照数组的方式 遍历argument  </span><br> &#125;<br> fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">// 用伪数组 实现求最大值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMax</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">var</span> <span class="hljs-built_in">max</span> = arguments[<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; arguments.<span class="hljs-built_in">length</span>; i++) &#123;<br>     <span class="hljs-keyword">if</span> (arguments[i] &gt; arguments[<span class="hljs-number">0</span>]) &#123;<br>       <span class="hljs-built_in">max</span> = arguments[i];<br>     &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>;<br> &#125;<br> <span class="hljs-keyword">var</span> result = getMax(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">77</span>,<span class="hljs-number">5</span>,<span class="hljs-number">85</span>)<br> colsole.<span class="hljs-built_in">log</span>(result);<br></code></pre></td></tr></table></figure><hr><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="作用域-1"><a href="#作用域-1" class="headerlink" title="作用域"></a>作用域</h3><p><strong>「作用域」</strong>一段程序代码中所用到的名字并不总是有效和可靠的，而限定这个名字的可用性代码范围就是这个名字的作用域。</p><ul><li>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</li><li>ES6之前作用域有两种 <code>全局作用域</code>和<code>局部作用域</code>(函数作用域)</li></ul><p><strong>「全局作用域」</strong>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的js文件。</p><p><strong>「局部作用域」</strong>作用于函数内部的代码环境，就是局部作用域。因为跟函数有关系，所以也被称为<code>函数作用域</code>。</p><p><strong>「JS没有块级作用域」</strong></p><ul><li>块作用域由 {} 包括</li><li>在其他编程语言，if语句中，循环语句创建的变量，仅仅只能在本if语句，本循环语句中使用，如下👇👇</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">true</span>)&#123;<br>  <span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">123</span>;<br>  System.out.<span class="hljs-built_in">print</span>(<span class="hljs-built_in">num</span>); <span class="hljs-comment">//123</span><br>&#125;<br>System.out.<span class="hljs-built_in">print</span>(<span class="hljs-built_in">num</span>);<span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><ul><li>以上java代码会报错，因为代码中 {}是一块作用域，其中声明的变量num，在{}之外不能使用，而JavaScript代码则不会报错</li><li>Js中没有块级作用域 (在ES6之前)</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>  <span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num); <span class="hljs-comment">// 123</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);<span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><blockquote><p>在JavaScript中，根据作用域的不同，变量可以分为两种:👇</p><ul><li><code>全局变量</code></li><li><code>局部变量</code></li></ul></blockquote><p><strong>「全局变量」</strong>在全局作用域下声明的变量(在函数外部定义的变量)</p><ul><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下 var 声明的变量 是全局变量</li><li>特殊情况下，在函数内不使用var声明的变量也是全局变量(不建议使用)。</li></ul><p><strong>「局部变量」</strong>在局部作用域下声明的变量(在函数内部定义的变量)</p><ul><li>局部变量只能在函数内部使用</li><li>在函数内部 var声明的变量是局部变量</li><li>函数的形参实际上就是局部变量</li></ul><p><strong>「全局变量和局部变量的区别」</strong></p><ul><li><code>全局变量:</code>在任何一个地方都可以使用，只有在浏览器关闭时才会销毁，因此比较占内存</li><li><code>局部变量:</code>旨在函数内部使用，当其所在的代码块被执行时，才会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间。</li></ul><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p><strong>「作用域链」</strong>只要是代码都在一个作用域中，写在函数内部的局部作用域，未卸载仍和行数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据<code>[内部函数可以访问外部函数变量]</code> 的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( num );<br>    &#125;<br>    f2();<br>&#125;<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">456</span>;<br>f1();<br></code></pre></td></tr></table></figure><p><code>作用域链</code>采取就近原则的方式来查找变量最终的值</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-string">&#x27;22&#x27;</span>;<br>    fn2();<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span>;<br>        fn3();<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> a = <span class="hljs-number">4</span>;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">//a的值 4</span><br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b); <span class="hljs-comment">//b的值 &#x27;22&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br>fn1();<br></code></pre></td></tr></table></figure><h3 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h3><p><strong>「预解析相关概念」</strong>JavaScript代码是由浏览器中的JavaScript解析器来执行的。JavaScript解析器在运行JavaScript代码的时候分为两步:预解析和代码执行。</p><ul><li><strong>「预解析」</strong>在当前作用域下，JS代码执行之前，浏览器会默认把带有 var 和 function声明的变量在内存中进行提前声明或定义。</li><li><strong>「代码执行」</strong>从上往下执行JS语句</li></ul><p>预解析会把变量和函数的声明在代码执行之前完成，预解析也叫做变量、函数提升。</p><p><strong>「变量预解析(变量提升)」</strong> 变量的声明会被提升到当前作用域的最上面，变量的赋值不提升。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);  <span class="hljs-comment">// 结果是多少？</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;      <span class="hljs-comment">// ？</span><br><br>相当于<br><span class="hljs-keyword">var</span> num;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);<span class="hljs-comment">// 结果是 undefined</span><br>num = <span class="hljs-number">10</span>;<br>结果: <span class="hljs-literal">undefined</span><br>注意: 变量提升只提升声明，不提升赋值。<br></code></pre></td></tr></table></figure><p><strong>「函数预解析(函数提升)」</strong> 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">fn();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;打印&#x27;</span>);<br>&#125;<br>结果: 控制台打印字符串 --- <span class="hljs-string">&quot;打印&quot;</span><br>注意: 函数声明代表函数整体，所以函数提升后，函数名代表整个函数，但是函数并没有被调用！<br></code></pre></td></tr></table></figure><p><strong>「函数表达式声明函数问题」</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs arcade">函数表达式创建函数，会执行变量提升，此时接收函数的变量名无法正确的调用<br>fn();<br><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;想不到吧&quot;</span>);<br>&#125;<br>结果:报错提示 <span class="hljs-string">&quot;fn is not a function&quot;</span><br>解释: 该段代码执行之前，会做变量声明提升，fn在提升之后的值<br>      是<span class="hljs-literal">undefined</span>;而fn调用是在fn被赋值为函数体之前，<br>      此时fn的值是<span class="hljs-literal">undefined</span>，所以无法被调用。<br>预解析案例<span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>fun();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);<br>  <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;<br>&#125;<br><br>相当于执行了以下操作 结果打印 <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">var</span> num;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> num;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);<br>  num = <span class="hljs-number">20</span>;<br>&#125;<br>num = <span class="hljs-number">10</span>;<br>fun(); <br>预解析案例<span class="hljs-number">2</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">18</span>;<br>f1();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> b = <span class="hljs-number">9</span>;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;123&#x27;</span>;<br>&#125;<br><br>相当于执行了以下操作 结果为 <span class="hljs-literal">undefined</span> <span class="hljs-number">9</span><br><span class="hljs-keyword">var</span> a;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> b;<br>  <span class="hljs-keyword">var</span> a;<br>  b = <span class="hljs-number">9</span>;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);<br>  a = <span class="hljs-string">&#x27;123&#x27;</span>;  <br>&#125;<br>a = <span class="hljs-number">18</span>;<br>f1();  <br>预解析案例<span class="hljs-number">3</span><br>f1();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = b = c = <span class="hljs-number">9</span>;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c);<br>&#125;<br><br>相当于执行了以下操作 结果为 <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-string">&quot;报错--a is not defined&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a;<br>  a = b = c = <span class="hljs-number">9</span>;<br>  <span class="hljs-comment">//相当于 var a = 9; b=9; c=9; b和c 直接赋值，没有var声明，当全局变量看。</span><br>  <span class="hljs-comment">// 差异：集体声明 var a = 9,b = 9, c = 9;</span><br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c);<br>&#125;<br>f1();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br></code></pre></td></tr></table></figure><hr><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h3><p><strong>「对象」</strong>在JavaScript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><ul><li><p>对象是由属性和方法组成的</p></li><li><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中常用方法来表示（常用动词）</li></ul></li></ul><p><strong>「为什么需要对象」</strong></p><ul><li>保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组，如果保存一个的完整信息呢？</li><li>为了更好地存储一组数据，对象应用而生；对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;fan&quot;</span>,<br>  <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-string">&quot;height&quot;</span>:<span class="hljs-number">155</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h3><p><strong>「1. 利用字面量创建对象」</strong>使用对象字面量创建对象：</p><ul><li>就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法；{ } 里面采取键值对的形式表示<br>-<code>键</code>：相当于属性名<br>-<code>值</code>：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// star 就是创建的对象</span><br><span class="hljs-keyword">var</span> star = &#123;<br>  name : <span class="hljs-string">&#x27;pink&#x27;</span>,<br>  age : <span class="hljs-number">18</span>,<br>  sex : <span class="hljs-string">&#x27;男&#x27;</span>,<br>  sayHi : <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>    alert(<span class="hljs-string">&#x27;大家好啊&#x27;</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>对象的使用</p></li><li><ul><li>对象的属性：对象中<code>存储具体数据</code>的“键值对”中的键称为对象的属性，即对象中存储具体数据的项。</li><li>对象的方法：对象中<code>存储函数</code>的“键值对”中的“键”称为对象的方法，即对象中存储函数的项。</li><li>访问对象的属性：对象里面的属性调用：<code>对象.属性名</code>；对象里面属性的另一种调用方式：对象[‘属性名’],注意方括号里面的属性必须加上引号。</li><li>调用对象的方法:<code>对象.方法名();</code></li><li>变量、属性、函数、方法总结：<br><code>①变量</code>：单独声明赋值，单独存在<br><code>②属性</code>:对象里面的变量称为属性，不需要声明，用来描述该对象的特征。<br><code>③方法</code>：方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器。对象里面的函数称为方法，方法不需要声明，使用”对象.方法名()”的方式就可以调用，方法用来描述该对象的行为和功能。<br><code>④函数</code>:单独存在的，通过”函数名()”的方式就可以调用。</li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(star.name)     <span class="hljs-comment">// 调用名字属性</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(star[<span class="hljs-string">&#x27;name&#x27;</span>])  <span class="hljs-comment">// 调用名字属性</span><br><br>star.sayHi();<br></code></pre></td></tr></table></figure><p><strong>「2. 利用new Object创建对象」</strong></p><ul><li>创建空对象</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">通过内置构造函数<span class="hljs-built_in">Object</span>创建对象，此时andy变量已经保存了创建出来的空对象<br><span class="hljs-keyword">var</span> andy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();  <br></code></pre></td></tr></table></figure><ul><li>给空对象添加属性和方法</li></ul><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs openscad">通过对象操作属性和方法的方式，来为对象增加属性和方法<br>andy.name = &#x27;pink&#x27;;<br>andy.age = <span class="hljs-number">18</span>; <span class="hljs-comment">// andy.age = 19修改对象属性</span><br>andy.sex = &#x27;男；<span class="hljs-comment">// andy.phoneNum = 110 添加属性</span><br>andy.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;</span><br>  alert(&#x27;大家好&#x27;);<br>&#125;<br>obj.sayHi();调用对象的方法 <span class="hljs-comment">//第二种写法 obj[&#x27;sayHi&#x27;]();</span><br><br><span class="hljs-comment">// Object()第一个字母大写；</span><br><span class="hljs-comment">//new Object() 需要new关键字，使用的格式:对象.属性 = 值</span><br></code></pre></td></tr></table></figure><p><strong>「3. 利用构造函数创建对象」</strong></p><p><code>构造函数</code>是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值,它总与new运算符一起使用，我们可以把对象中一些公共的属性和方法抽出来，然后封装到这个函数里面。</p><ul><li>构造函数的封装格式：</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">function 构造函数名(形参<span class="hljs-number">1</span>，形参<span class="hljs-number">2</span>，形参<span class="hljs-number">3</span>...) &#123;<br>  this.属性名<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 参数<span class="hljs-number">1</span><span class="hljs-comment">;</span><br>  this.属性名<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 参数<span class="hljs-number">2</span><span class="hljs-comment">;</span><br>  this.属性名<span class="hljs-number">3</span> <span class="hljs-operator">=</span> 参数<span class="hljs-number">3</span><span class="hljs-comment">;</span><br>  this.方法名 <span class="hljs-operator">=</span> 函数体<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>构造函数的调用格式</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-type"></span>构造函数名(实参<span class="hljs-number">1</span>，实参<span class="hljs-number">2</span>，实参<span class="hljs-number">3</span>);<br><span class="hljs-comment">// 以上代码中，obj即接收到构造函数创建出来的对象。</span><br>注意事项：<br>  <span class="hljs-number">1.</span>构造函数约定首字母大写<br>  <span class="hljs-number">2.</span>函数内的属性和方法前面需要添加<span class="hljs-built_in">this</span>，表示当前对象的属性和方法<br>  <span class="hljs-number">3.</span>构造函数中不需要retrun返回结果<br>  <span class="hljs-number">4.</span>但我们创建对象的时候，必须用<span class="hljs-keyword">new</span> <span class="hljs-type"></span>来调用构造函数<br>  <br>  <span class="hljs-number">1.</span>其他：构造函数如Stars(),抽取了对象的公共部分，封装到了函数里面，它<br>   泛指某一大类(class)<br>  <span class="hljs-number">2.</span>创建对象，如<span class="hljs-keyword">new</span> <span class="hljs-type">Stars</span>();特指某一个，利用<span class="hljs-keyword">new</span><span class="hljs-type"></span>关键字创建对象的过程<br>   我们也称为对象实例化<br> <br></code></pre></td></tr></table></figure><ul><li><p><strong>new关键字的作用(面试题)</strong></p></li><li><ul><li>1.在构造函数代码开始执行之前，创建一个空对象；</li><li>2.修改this的指向，把this指向创建出来的空对象；</li><li>3.执行构造函数内的代码，给这个新对象添加属性和方法</li><li>4.在函数完成之后，返回这个创建出来的新对象(所以构造函数里面不需要return)</li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 工厂函数创建对象 这个把创建好的对象返回给函数调用处</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPerson</span>(<span class="hljs-params">name, age, job</span>) &#123;<br>  <span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Object();<br>  person.name = name;<br>  person.age = age;<br>  person.job = job;<br>  person.sayHi = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;Hello,everyBody&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> person;<br>  &#125;<br><span class="hljs-keyword">var</span> p1 = createPerson(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;actor&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade">  <span class="hljs-keyword">for</span>...in 语句用于对数组或者对象的属性进行循环操作。<br><br>  其语法如下：<br>  <span class="hljs-keyword">for</span> (变量 in 对象名字) &#123;<br>      <span class="hljs-comment">// 在此执行代码</span><br>  &#125;<br>  语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。<br>  <br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k in obj) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(k);      <span class="hljs-comment">// 这里的 k 是属性名</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj[k]); <span class="hljs-comment">// 这里的 obj[k] 是属性值</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p><strong>「内置对象」</strong>JavaScript 中的对象分为3种：自定义对象 、内置对象、 浏览器对象<br>前面两种对象是JS基础内容，属于ECMAScript;第三个浏览器对象属于JS独有的，JS API讲解内置对象就是指js语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而非必要的功能(属性和方法),内置对象最大的优点就是帮助我们快速开发。</p><p><strong>「查文档」</strong>学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习。<br><code>MDN:</code><a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p><strong>「Math对象」</strong>不是构造函数，它具有数学常数和函数的属性和方法，跟数学相关。</p><table><thead><tr><th align="left">属性、方法名</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">Math.PI</td><td align="left">圆周率</td></tr><tr><td align="left">Math.floor()</td><td align="left">向下取整</td></tr><tr><td align="left">Math.ceil()</td><td align="left">向上取整</td></tr><tr><td align="left">Math.round()</td><td align="left">四舍五入版 就近取整  注意 -3.5  结果是  -3</td></tr><tr><td align="left">Math.abs()</td><td align="left">绝对值</td></tr><tr><td align="left">Math.max()/Math.min()</td><td align="left">求最大和最小值</td></tr><tr><td align="left">Math.random()</td><td align="left">获取范围在[0,1)内的随机值</td></tr></tbody></table><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gml">- 获取指定范围的随机整数<br>  <span class="hljs-keyword">function</span> getRandom(<span class="hljs-built_in">min</span>, <span class="hljs-built_in">max</span>) &#123;<br>    <span class="hljs-keyword">return</span> Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (<span class="hljs-built_in">max</span> - <span class="hljs-built_in">min</span> + <span class="hljs-number">1</span>)) + <span class="hljs-built_in">min</span>; <br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><p>  Date 对象和 Math 对象不一样，Date是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p><ul><li><p><strong>使用Date实例化日期对象</strong></p></li><li><ul><li>获取当前时间必须实例化</li><li>获取指定时间的日期对象</li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> <span class="hljs-built_in">now</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-keyword">var</span> future = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2020/10/1&#x27;</span>)<br><span class="hljs-comment">// 注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</span><br></code></pre></td></tr></table></figure><ul><li><p>续上</p></li><li><ul><li>使用Date实例的方法和属性</li><li>getMonth()方法获取到的月份 + 1 = 当月<img src="D:\folder\public\img\image-20220410211951330.png" alt="image-20220410211951330"></li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//参数常用写法 数字型或者字符串型 &#x27;2019-10-1 8:8:8&#x27;</span><br><span class="hljs-keyword">var</span> date1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2019</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>);<br><span class="hljs-comment">//日期格式化</span><br>      <span class="hljs-comment">// 格式化日期 年 月 日</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">date</span>.getFullYear()); <span class="hljs-comment">//返回当前日期的年 2020</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">date</span>.getMonth() + <span class="hljs-number">1</span>); <span class="hljs-comment">//月份 返回的月份小1个月，记得月份加1呦</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">date</span>.getDate()); <span class="hljs-comment">//返回的是 几号</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">date</span>.getDay); <span class="hljs-comment">//周一返回的是1 周六返回的是6 周日返回的是0</span><br>    <span class="hljs-comment">//我们写一个 2020年 9月 6日 星期日</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">year</span> = <span class="hljs-built_in">date</span>.getFullYear();<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">month</span> = <span class="hljs-built_in">date</span>.getMonth() + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> dates = <span class="hljs-built_in">date</span>.getDate();<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">day</span> = <span class="hljs-built_in">date</span>.getDay();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">day</span> == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">day</span> = <span class="hljs-string">&quot;星期日&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;今天是&quot;</span> + <span class="hljs-built_in">year</span> + <span class="hljs-string">&quot;年&quot;</span> + <span class="hljs-built_in">month</span> + <span class="hljs-string">&quot;月&quot;</span> + dates + <span class="hljs-string">&quot;日&quot;</span> + <span class="hljs-built_in">day</span>);<br>    <span class="hljs-comment">//格式化日期 时分秒</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">date</span>.getHours()); <span class="hljs-comment">//时</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">date</span>.getMinutes()); <span class="hljs-comment">//分</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">date</span>.getSeconds()); <span class="hljs-comment">// 秒</span><br><br>    <span class="hljs-comment">//封装一个函数返回当前的 时 分 秒 格式 08:08:08</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getTimer</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">var</span> time = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>      <span class="hljs-keyword">var</span> h = time.getHours();<br>      <span class="hljs-keyword">var</span> h = h &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + h : h;<br><br>      <span class="hljs-keyword">var</span> m = time.getMinutes();<br>      <span class="hljs-keyword">var</span> m = m &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + m : m;<br><br>      <span class="hljs-keyword">var</span> s = time.getSeconds();<br>      <span class="hljs-keyword">var</span> s = s &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + s : s;<br>      <span class="hljs-keyword">return</span> h + <span class="hljs-string">&quot;:&quot;</span> + h + <span class="hljs-string">&quot;:&quot;</span> + s;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(getTimer());<br></code></pre></td></tr></table></figure><ul><li><code>获取Date日期总的毫秒数(时间戳)</code><br>基于1970年1月1日(世界标准世界)起的毫秒数</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 实例化Date对象</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">now</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-comment">// 1. 用于获取对象的原始值</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">now</span>.valueOf()) <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">now</span>.getTime()) <br><span class="hljs-comment">// 2. 简单写可以这么做 (最常用的)</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">now</span> = + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();   <br><span class="hljs-comment">// 3. HTML5中提供的方法，有兼容性问题</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">now</span> = <span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>();<br>倒计时案例 ：<br><span class="hljs-number">1.</span> 输入的时间减去现在的时间就是剩余的时间，即倒计时。<br><span class="hljs-number">2.</span>用时间戳来做，用户输入时间总的毫秒数减去现在时间的总的毫秒数，<br> 得到的就是剩余时间的毫秒数<br><span class="hljs-number">3.</span>把剩余时间总的毫秒数转换为天、时、分、秒  (时间戳转换时分秒)<br>  转换公式如下：<br>  d = parseInt(总秒数/<span class="hljs-number">60</span>/<span class="hljs-number">60</span>/<span class="hljs-number">24</span>) <span class="hljs-comment">// 计算天数</span><br>  h = parseInt(总秒数/<span class="hljs-number">60</span>/<span class="hljs-number">60</span>%<span class="hljs-number">24</span>) <span class="hljs-comment">// 计算小时</span><br>  m = parseInt(总秒数/<span class="hljs-number">60</span>%<span class="hljs-number">60</span>);   <span class="hljs-comment">// 计算分钟  </span><br>  s = parseInt(总秒数%<span class="hljs-number">60</span>);      <span class="hljs-comment">// 计算当前秒数 </span><br>    <span class="hljs-comment">// 倒计时案例 封装函数实现</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">countDown</span>(<span class="hljs-params">time</span>) &#123;<br>      <span class="hljs-keyword">var</span> nowTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// 返回的是当前时间总的毫秒数</span><br>      <span class="hljs-keyword">var</span> inputTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(time); <span class="hljs-comment">// 返回的是用户输入时间总的毫秒数</span><br>      <span class="hljs-keyword">var</span> times = (inputTime - nowTime) / <span class="hljs-number">1000</span>; <span class="hljs-comment">// times是剩余时间总的秒数</span><br>      <span class="hljs-keyword">var</span> d = parseInt(times / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>); <span class="hljs-comment">// 天</span><br>      d = d &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + d : d;<br>      <span class="hljs-keyword">var</span> h = parseInt((times / <span class="hljs-number">60</span> / <span class="hljs-number">60</span>) % <span class="hljs-number">24</span>); <span class="hljs-comment">//时</span><br>      h = h &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + h : h;<br>      <span class="hljs-keyword">var</span> m = parseInt((times / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span>); <span class="hljs-comment">// 分</span><br>      m = m &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + m : m;<br>      <span class="hljs-keyword">var</span> s = parseInt(times % <span class="hljs-number">60</span>); <span class="hljs-comment">// 当前的秒</span><br>      s = s &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + s : s;<br>      <span class="hljs-keyword">return</span> d + <span class="hljs-string">&quot;天&quot;</span> + h + <span class="hljs-string">&quot;时&quot;</span> + m + <span class="hljs-string">&quot;分&quot;</span> + s + <span class="hljs-string">&quot;秒&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(countDown(<span class="hljs-string">&quot;2020-10-1 18:00:00&quot;</span>));<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">date</span>);<br></code></pre></td></tr></table></figure><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><p><strong>「创建数组的两种方式」</strong></p><ul><li><p><strong>1. 字面量方式</strong><code>var arr = [1,&quot;test&quot;,true];</code></p></li><li><p><strong>2. 实例化数组对象 new Array()</strong><code>var arr = new Array();</code></p></li><li><ul><li>注意：上面代码中arr创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</li><li>如果只传入一个参数(数字)，则参数规定了数组的长度。</li><li>如果传入了多个参数，则参数称为数组的元素。</li></ul></li></ul><p><strong>「检测是否为数组」</strong></p><ul><li><p><strong>1. instanceof 运算符</strong></p></li><li><ul><li>instanceof 可以判断一个对象是否是某个构造函数的实例</li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">23</span>];<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr instanceof <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj instanceof <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>2. Array.isArray()</strong></p></li><li><ul><li>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">23</span>];<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Array</span>.isArray(arr));   <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Array</span>.isArray(obj));   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>3. 注意 typeof用法</strong></p></li><li><ul><li>typeof 用于判断变量的类型</li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">23</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> arr) <span class="hljs-comment">// object 对象arr是构造函数的实例因此是对象数据类型</span><br></code></pre></td></tr></table></figure><p><strong>「添加删除数组元素的方法」</strong></p><ul><li>数组中有进行增加、删除元素的方法，部分方法如下表👇</li></ul><p><img src="D:\folder\public\img\image-20220410212315669.png" alt="image-20220410212315669"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// 5 向数组末尾添加元素</span><br>arr.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">//删除数组最后一个值并返回</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// [1,2,3,4]</span><br><br><span class="hljs-comment">// 向数组的开头添加元素并返回数组长度 </span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.unshift(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>)); <span class="hljs-comment">// 6  数组变为[5,6,1,2,3,4]</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.shift()); <span class="hljs-comment">// 5 删除数组开头的元素并返回该值</span><br></code></pre></td></tr></table></figure><p><strong>「数组排序」</strong></p><ul><li>数组中有对数组本身排序的方法，部分方法如下表</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">是否修改原数组</th></tr></thead><tbody><tr><td align="left">reverse()</td><td align="left">颠倒数组中元素的顺序，无参数</td><td align="left">该方法会改变原来的数组 返回新数组</td></tr><tr><td align="left">sort()</td><td align="left">对数组的元素进行排序</td><td align="left">该方法会改变原来的数组 返回新数组</td></tr></tbody></table><ul><li><p>注意：<strong>sort方法需要传入参数(函数)来设置升序、降序排序</strong></p></li><li><ul><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 踩坑 数组sort()排序(冒泡排序) return a - b 则升序</span><br><span class="hljs-comment">// 写法固定 参考如下</span><br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">77</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>];<br>arr1.<span class="hljs-built_in">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>  <span class="hljs-keyword">return</span> a-b;<br>&#125;);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr1);<br></code></pre></td></tr></table></figure><p><strong>「数组索引方法」</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-comment">// 查找元素2的索引</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">indexOf</span>(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 查找元素1在数组中的最后一个索引</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.lastIndexOf(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><p><strong>「数组转换为字符串」</strong></p><ul><li>数组中有把数组转化为字符串的方法，部分方法如下表</li><li>注意：join方法如果不传入参数，则按照 “ , ”拼接元素<img src="D:\folder\public\img\image-20220410212414253.png" alt="image-20220410212414253"></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">var</span> arr2 = arr;<br><span class="hljs-keyword">var</span> str = arr.toString(); <span class="hljs-comment">// 将数组转换为字符串</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str); <span class="hljs-comment">// 1,2,3,4</span><br>  <br><span class="hljs-keyword">var</span> str2 = arr2.join(<span class="hljs-string">&quot;|&quot;</span>);<span class="hljs-comment">//按照键入字符将数组转换为字符串</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str2);<br></code></pre></td></tr></table></figure><p>**「其他方法」<img src="D:\folder\public\img\image-20220410212431939.png" alt="image-20220410212431939"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>];<br><span class="hljs-keyword">var</span> arr3 = arr.concat(arr2);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr3); <span class="hljs-comment">// [1,2,3,4,5,6,7,8]</span><br><br><span class="hljs-comment">// slice(begin,end) 是一种左闭右开区间 [1,3)</span><br><span class="hljs-comment">// 从索引1出开始截取，到索引3之前</span><br><span class="hljs-keyword">var</span> arr4 = arr.<span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr4); <span class="hljs-comment">// [2,3]</span><br><br><span class="hljs-keyword">var</span> arr5 = arr2.<span class="hljs-built_in">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr5); <span class="hljs-comment">// [5,6,7]</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr2); <span class="hljs-comment">// [8]   splice()会影响原数组</span><br></code></pre></td></tr></table></figure><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><p><strong>「基本包装类型」</strong>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。<br>  <code>基本包装类型就是把简单数据类型包装成为复杂数据类型</code>，这样基本数据类型就有了属性和方法。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 下面代码有什么问题？</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;andy&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.<span class="hljs-built_in">length</span>); <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><p>  按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span><br><span class="hljs-built_in">var</span> temp = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&#x27;andy&#x27;</span>);<br><span class="hljs-comment">// 2. 赋值给我们声明的字符变量</span><br><span class="hljs-built_in">str</span> = temp;<br><span class="hljs-comment">// 3. 销毁临时变量</span><br>temp = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p><strong>「字符串的不可变」</strong></p><ul><li>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</li><li>当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。</li><li>由于字符串的不可变，在<strong>「大量拼接字符串」</strong>的时候会有效率问题</li></ul><p><strong>「根据字符返回位置」</strong></p><ul><li>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：<img src="D:\folder\public\img\image-20220410212501084.png" alt="image-20220410212501084"></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;anndy&quot;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&quot;d&quot;</span>)); <span class="hljs-comment">// 3</span><br><span class="hljs-comment">//指定从索引号为4的地方开始查找字符&quot;d&quot;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-number">4</span>)); <span class="hljs-comment">// -1</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.lastIndexOf(<span class="hljs-string">&quot;n&quot;</span>)); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</p><ol><li>先查找第一个o出现的位置</li><li>然后 只要indexOf 返回的结果不是 -1 就继续往后查找</li><li>因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找</li></ol><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;oabcoefoxyozzopp&quot;</span>;<br><span class="hljs-built_in">var</span> <span class="hljs-keyword">index</span> = <span class="hljs-built_in">str</span>.indexOf(<span class="hljs-string">&quot;o&quot;</span>);<br><span class="hljs-built_in">var</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">index</span> !== <span class="hljs-number">-1</span>) &#123;<br>  console.log(<span class="hljs-keyword">index</span>);<br>  num++;<br>  <span class="hljs-keyword">index</span> = <span class="hljs-built_in">str</span>.indexOf(<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-keyword">index</span> + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>「根据位置返回字符」</strong></p><ul><li>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：<img src="C:\Users\Master\AppData\Roaming\Typora\typora-user-images\image-20220410212530518.png" alt="image-20220410212530518"></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 根据位置返回字符</span><br><span class="hljs-comment">// 1. charAt(index) 根据位置返回字符</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;andy&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.charAt(<span class="hljs-number">3</span>)); <span class="hljs-comment">// y</span><br><span class="hljs-comment">// 遍历所有的字符</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">length</span>; i++) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.charAt(i));<br>&#125; <span class="hljs-comment">// a n d y</span><br><br><span class="hljs-comment">// 2. charCodeAt(index)  </span><br><span class="hljs-comment">//返回相应索引号的字符ASCII值 目的： 判断用户按下了那个键 </span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.charCodeAt(<span class="hljs-number">0</span>)); <span class="hljs-comment">// 97</span><br><span class="hljs-comment">// 3. str[index] H5 新增的</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str[<span class="hljs-number">0</span>]); <span class="hljs-comment">// a</span><br></code></pre></td></tr></table></figure><ul><li><p>案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p></li><li><ol><li>核心算法：利用 charAt(） 遍历这个字符串</li><li>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</li><li>遍历对象，得到最大值和该字符 注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象中，对应的属性值是该字符出现的次数</li></ol></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcoefoxyozzopp&quot;</span>;<br><span class="hljs-keyword">var</span> o = &#123;&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">length</span>; i++) &#123;<br>  <span class="hljs-keyword">var</span> chars = str.charAt(i); <span class="hljs-comment">// chars 是 字符串的每一个字符</span><br>  <span class="hljs-keyword">if</span> (o[chars]) &#123;<br>    <span class="hljs-comment">// o[chars] 得到的是属性值</span><br>    o[chars]++;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    o[chars] = <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(o);<br><span class="hljs-comment">// 2. 遍历对象</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">max</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> ch = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k in o) &#123;<br>  <span class="hljs-comment">// k 得到是 属性名</span><br>  <span class="hljs-comment">// o[k] 得到的是属性值</span><br>  <span class="hljs-keyword">if</span> (o[k] &gt; <span class="hljs-built_in">max</span>) &#123;<br>    <span class="hljs-built_in">max</span> = o[k];<br>    ch = k;<br>  &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">max</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;最多的字符是&quot;</span> + ch);<br></code></pre></td></tr></table></figure><p><strong>「字符串操作方法」</strong></p><ul><li>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：<img src="D:\folder\public\img\image-20220410212554451.png" alt="image-20220410212554451"></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 字符串操作方法<br><span class="hljs-regexp">//</span> <span class="hljs-number">1</span>. concat(<span class="hljs-string">&#x27;字符串1&#x27;</span>,<span class="hljs-string">&#x27;字符串2&#x27;</span>....)<br>var str = <span class="hljs-string">&#x27;andy&#x27;</span>;<br>console.log(str.concat(<span class="hljs-string">&#x27;red&#x27;</span>)); <span class="hljs-regexp">//</span> andyred<br><br><span class="hljs-regexp">//</span> <span class="hljs-number">2</span>. substr(<span class="hljs-string">&#x27;截取的起始位置&#x27;</span>, <span class="hljs-string">&#x27;截取几个字符&#x27;</span>);<br>var str1 = <span class="hljs-string">&#x27;改革春风吹满地&#x27;</span>;<br><span class="hljs-regexp">//</span> 第一个<span class="hljs-number">2</span> 是索引号的<span class="hljs-number">2</span> 从第几个开始  第二个<span class="hljs-number">2</span> 是取几个字符<br>console.log(str1.substr(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)); <span class="hljs-regexp">//</span> 春风<br></code></pre></td></tr></table></figure><ul><li><p><strong>replace()方法</strong></p></li><li><ul><li>replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：</li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">字符串.<span class="hljs-built_in">replace</span>(被替换的字符串， 要替换为的字符串)；<br></code></pre></td></tr></table></figure><ul><li><p><strong>split()方法</strong></p></li><li><ul><li>split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</li><li>其使用格式如下：</li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade">字符串.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;分割字符&quot;</span>)<br>    <span class="hljs-comment">// 1. 替换字符 replace(&#x27;被替换的字符&#x27;, &#x27;替换为的字符&#x27;)  它只会替换第一个字符</span><br>    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;andyandy&quot;</span>;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>)); <span class="hljs-comment">// bndyandy</span><br>    <span class="hljs-comment">// 有一个字符串 &#x27;abcoefoxyozzopp&#x27;  要求把里面所有的 o 替换为 *</span><br>    <span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&quot;abcoefoxyozzopp&quot;</span>;<br>    <span class="hljs-keyword">while</span> (str1.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&quot;o&quot;</span>) !== <span class="hljs-number">-1</span>) &#123;<br>      str1 = str1.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str1); <span class="hljs-comment">// abc*ef*xy*zz*pp</span><br><br>    <span class="hljs-comment">// 2. 字符转换为数组 split(&#x27;分隔符&#x27;)    </span><br>    <span class="hljs-comment">// 前面我们学过 join 把数组转换为字符串</span><br>    <span class="hljs-keyword">var</span> str2 = <span class="hljs-string">&quot;red, pink, blue&quot;</span>;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str2.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;,&quot;</span>)); <span class="hljs-comment">//[red,pink,blue]</span><br>    <span class="hljs-keyword">var</span> str3 = <span class="hljs-string">&quot;red&amp;pink&amp;blue&quot;</span>;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str3.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>)); <span class="hljs-comment">// [red,pink,blue]</span><br></code></pre></td></tr></table></figure><hr><h2 id="简单数据类型和复杂数据类型"><a href="#简单数据类型和复杂数据类型" class="headerlink" title="简单数据类型和复杂数据类型"></a>简单数据类型和复杂数据类型</h2><p><strong>「简单类型（基本数据类型、值类型）」</strong>：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p><p><strong>「复杂数据类型（引用类型）」</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p><p><strong>「堆栈」</strong></p><ul><li><p>堆栈空间分配区别：</p></li><li><ul><li>1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</li><li>简单数据类型存放到栈里面</li><li>2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</li><li><img src="D:\folder\public\img\image-20220410212743308.png" alt="image-20220410212743308"></li></ul></li><li><p>简单数据类型的存储方式</p></li><li><ul><li><p>值类型变量的数据直接存放在变量（栈空间）中</p><p><img src="D:\folder\public\img\image-20220410212812844.png" alt="image-20220410212812844"></p></li></ul></li><li><p>复杂数据类型的存储方式</p></li><li><ul><li>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</li><li><img src="D:\folder\public\img\image-20220410212842508.png" alt="image-20220410212842508"></li></ul></li></ul><p><strong>「简单类型传参」</strong><br>  函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a</span>) &#123;<br>    a++;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <br>&#125;<br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br>fn(x);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(x)；<br></code></pre></td></tr></table></figure><p>运行结果如下<img src="D:\folder\public\img\image-20220410212650018.png" alt="image-20220410212650018"></p><p><strong>「复杂数据类型传参」</strong><br>  函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>    this.name = name;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">x</span>) &#123; <span class="hljs-comment">// x = p</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(x.name); <span class="hljs-comment">// 2. 这个输出什么 ?    </span><br>    x.name = <span class="hljs-string">&quot;张学友&quot;</span>;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(x.name); <span class="hljs-comment">// 3. 这个输出什么 ?    </span><br>&#125;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;刘德华&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(p.name);    <span class="hljs-comment">// 1. 这个输出什么 ?   </span><br>f1(p);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(p.name);    <span class="hljs-comment">// 4. 这个输出什么 ?  </span><br></code></pre></td></tr></table></figure><p>运行结果如下：<img src="D:\folder\public\img\image-20220410212711164.png" alt="image-20220410212711164"></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML 基本认知</title>
    <link href="/2022/04/03/1.HTML%20%E5%9F%BA%E6%9C%AC%E8%AE%A4%E7%9F%A5/"/>
    <url>/2022/04/03/1.HTML%20%E5%9F%BA%E6%9C%AC%E8%AE%A4%E7%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML-基本认知"><a href="#HTML-基本认知" class="headerlink" title="HTML 基本认知"></a>HTML 基本认知</h1><h2 id="1、常见-5-大浏览器"><a href="#1、常见-5-大浏览器" class="headerlink" title="1、常见 5 大浏览器"></a>1、常见 5 大浏览器</h2><ul><li>IE</li><li>火狐 FireFox</li><li>谷歌 Chrome</li><li>Safari</li><li>欧朋 Opera</li></ul><h2 id="2、渲染引擎"><a href="#2、渲染引擎" class="headerlink" title="2、渲染引擎"></a>2、渲染引擎</h2><table><thead><tr><th>浏览器</th><th>内核</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td></tr><tr><td>FireFox</td><td>Gecko</td></tr><tr><td>Safari</td><td>Webkit</td></tr><tr><td>Chrome/Opera</td><td>Blink</td></tr></tbody></table><h2 id="3、Web-标准"><a href="#3、Web-标准" class="headerlink" title="3、Web 标准"></a>3、Web 标准</h2><p>保证不同浏览器打开页面显示效果一样</p><table><thead><tr><th>构成</th><th>语言</th><th>说明</th></tr></thead><tbody><tr><td>结构</td><td>HTML</td><td>页面元素</td></tr><tr><td>表现</td><td>CSS</td><td>页面样式</td></tr><tr><td>行为</td><td>JavaScript</td><td>页面交互</td></tr></tbody></table><h2 id="4、HTML"><a href="#4、HTML" class="headerlink" title="4、HTML"></a>4、HTML</h2><p>Hyper Text Markup Language 超文本标记语言</p><h2 id="5、hello-world"><a href="#5、hello-world" class="headerlink" title="5、hello world"></a>5、hello world</h2><p>文件扩展名：<code>.html</code></p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>hello world</strong></p><h2 id="6、HTML-骨架"><a href="#6、HTML-骨架" class="headerlink" title="6、HTML 骨架"></a>6、HTML 骨架</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>html 最外层标签</li><li>head 头部</li><li>title 标题</li><li>body 主体</li></ul><h2 id="7、开发工具"><a href="#7、开发工具" class="headerlink" title="7、开发工具"></a>7、开发工具</h2><ul><li>Visual Studio Code （首选）</li><li>WebStorm</li><li>Sublime Text</li></ul><h2 id="8、VS-Code-使用"><a href="#8、VS-Code-使用" class="headerlink" title="8、VS Code 使用"></a>8、VS Code 使用</h2><p>快速生成 html 网页结构：</p><ul><li><code>! + Tab</code> 多了一行代码<code>&lt;!DOCTYPE html&gt;</code></li><li><code>doc + Tab</code></li></ul><p>快捷键</p><ul><li>Live Server 打开：<code>[Alt+ L, Alt + O]</code></li></ul><h2 id="9、注释"><a href="#9、注释" class="headerlink" title="9、注释"></a>9、注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 注释内容 --&gt;</span><br></code></pre></td></tr></table></figure><ul><li>浏览器中不显示注释内容</li><li>添加和取消注释快捷键：<code>ctrl + /</code></li></ul><h2 id="10、标签结构"><a href="#10、标签结构" class="headerlink" title="10、标签结构"></a>10、标签结构</h2><ul><li>双标签 <code>&lt;开始标签&gt;内容&lt;/结束标签&gt;</code>, 例如：<code>&lt;strong&gt;内容&lt;/strong&gt;</code></li><li>单标签 <code>&lt;标签 /&gt;</code>, 例如：<code>&lt;br&gt;</code></li></ul><h2 id="11、标签关系"><a href="#11、标签关系" class="headerlink" title="11、标签关系"></a>11、标签关系</h2><ul><li>父子关系（嵌套关系）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>兄弟关系（并列关系）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS 装饰</title>
    <link href="/2022/04/03/11.CSS%20%E8%A3%85%E9%A5%B0/"/>
    <url>/2022/04/03/11.CSS%20%E8%A3%85%E9%A5%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS-装饰"><a href="#CSS-装饰" class="headerlink" title="CSS 装饰"></a>CSS 装饰</h1><h2 id="1-垂直对齐-vertical-align"><a href="#1-垂直对齐-vertical-align" class="headerlink" title="1. 垂直对齐 vertical-align"></a>1. 垂直对齐 vertical-align</h2><p>基线(baseline)：浏览器文字类型元素排版中存在用于对齐的基线</p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>baseline</td><td>默认，基线对齐</td></tr><tr><td>top</td><td>顶部对齐</td></tr><tr><td>middle</td><td>中部对齐</td></tr><tr><td>bottom</td><td>底部对齐</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">vertical-align</span>: middle;<br></code></pre></td></tr></table></figure><p>示例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.text</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.text-baseline</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">vertical-align</span>: baseline;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.text-top</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">vertical-align</span>: top;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.text-middle</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.text-bottom</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">vertical-align</span>: bottom;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text text-baseline&quot;</span>&gt;</span>绝知此事要躬行<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text text-top&quot;</span>&gt;</span>绝知此事要躬行<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text text-middle&quot;</span>&gt;</span>绝知此事要躬行<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text text-bottom&quot;</span>&gt;</span>绝知此事要躬行<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-1.html" height="50" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><blockquote><p>浏览器把行内和行内块当做文字处理，文字默认基线对齐</p></blockquote><p>示例一：输入框垂直居中对齐</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;button&quot;</span>]</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.middle</span> <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;搜索&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-2.html" height="70" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>示例二：图片垂直居中对齐</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.middle-box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.middle-box</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://api.isoyu.com/bing_images.php&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;搜索&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box middle-box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://api.isoyu.com/bing_images.php&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;搜索&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-3.html" height="450" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>示例三：图片水平垂直居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">        <span class="hljs-comment">/* 水平居中 */</span></span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">        <span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-comment">/* 垂直居中 */</span></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/*方式一*/</span></span><br><span class="language-css">        <span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="language-css">        <span class="hljs-comment">/*方式二*/</span></span><br><span class="language-css">        <span class="hljs-comment">/* display: block; */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://api.isoyu.com/bing_images.php&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-4.html" height="420" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="2-光标类型-cursor"><a href="#2-光标类型-cursor" class="headerlink" title="2. 光标类型 cursor"></a>2. 光标类型 cursor</h2><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>default</td><td>默认，箭头</td></tr><tr><td>pointer</td><td>小手，提示可点击</td></tr><tr><td>text</td><td>工字型，提示可选择</td></tr><tr><td>move</td><td>十字光标，提示可移动</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.cursor--pointer</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.cursor--text</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">cursor</span>: text;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.cursor--move</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">cursor</span>: move;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>默认，箭头<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cursor--pointer&quot;</span>&gt;</span>小手，提示可点击<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cursor--text&quot;</span>&gt;</span>工字型，提示可选择<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cursor--move&quot;</span>&gt;</span>十字光标，提示可移动<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-5.html" height="110" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="3-边框圆角-border-radius"><a href="#3-边框圆角-border-radius" class="headerlink" title="3. 边框圆角 border-radius"></a>3. 边框圆角 border-radius</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 单值 4个角一样*/</span><br><span class="hljs-attribute">border-radius</span>: 数字px/百分比;<br><br><span class="hljs-comment">/* 多值 左上角开始，顺时针赋值，没有赋值看对角*/</span><br><span class="hljs-attribute">border-radius</span>: 左上 右上 右下 左下;<br></code></pre></td></tr></table></figure><p>（1）正圆</p><ul><li>盒子必须是正方形</li><li>设置边框圆角为盒子宽高的一半</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-6.html" height="220" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 最大值 50% */</span><br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br></code></pre></td></tr></table></figure><p>（2）胶囊按钮</p><ul><li>盒子设置为长方形</li><li>设置边框圆角为高度的一半</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-radius</span>: height/<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-7.html" height="70" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="4-溢出部分效果-overflow"><a href="#4-溢出部分效果-overflow" class="headerlink" title="4. 溢出部分效果 overflow"></a>4. 溢出部分效果 overflow</h2><p>溢出部分：盒子内容部分超出盒子范围的区域</p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>visible</td><td>默认，溢出部分可见</td></tr><tr><td>hidden</td><td>溢出部分隐藏</td></tr><tr><td>scroll</td><td>无论是否溢出都显示滚动条</td></tr><tr><td>auto</td><td>根据是否溢出，自动显示或隐藏滚动条</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    江夏赠韦南陵冰<br><br>    李白〔唐代〕<br><br>    胡骄马惊沙尘起，胡雏饮马天津水。<br>    君为张掖近酒泉，我窜三色九千里。(三色 一作：三巴)<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-8.html" height="120" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="5-元素本身隐藏"><a href="#5-元素本身隐藏" class="headerlink" title="5. 元素本身隐藏"></a>5. 元素本身隐藏</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 占位隐藏 */</span><br><span class="hljs-attribute">visibility</span>: hidden;<br><br><span class="hljs-comment">/* 不占位隐藏（常用） */</span><br><span class="hljs-attribute">display</span>: none;<br>&lt;style&gt;<br>    <span class="hljs-selector-class">.box-1</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">visibility</span>: hidden;<br>    &#125;<br><br>    <span class="hljs-selector-class">.box-2</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">display</span>: none;<br>    &#125;<br>&lt;/style&gt;<br><br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;box-<span class="hljs-number">1</span>&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;box-<span class="hljs-number">2</span>&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-9.html" height="120" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>示例：默认隐藏 鼠标悬停显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.box-qrcode</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box-qrcode</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-qrcode&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-10.html" height="220" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="6-元素整体透明-opacity"><a href="#6-元素整体透明-opacity" class="headerlink" title="6. 元素整体透明 opacity"></a>6. 元素整体透明 opacity</h2><p>属性值：</p><ul><li>0-1 之间的数字；</li><li>0 完全透明，1 完全不透明</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">        <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">5</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-11.html" height="120" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="7-半透明"><a href="#7-半透明" class="headerlink" title="7.半透明"></a>7.半透明</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);Copy <span class="hljs-selector-tag">to</span> clipboardErrorCopied<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* width: 100px; */</span></span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.4</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-12.html" height="120" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="8-精灵图（雪碧图-sprite）"><a href="#8-精灵图（雪碧图-sprite）" class="headerlink" title="8.精灵图（雪碧图, sprite）"></a>8.精灵图（雪碧图, sprite）</h2><p>将多张小图合并成一张大图</p><ul><li>优点：减少服务器发送次数，减轻服务器压力，提高页面加载速度</li><li>缺点：修改起来比较麻烦</li></ul><p>精灵图使用步骤</p><ol><li>设置盒子尺寸和小图尺寸相同</li><li>将精灵图设置为盒子的背景图片</li><li>修改背景图位置</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./img/jd-sprite.png&#x27;</span>);</span><br><span class="language-css">        <span class="hljs-attribute">background-repeat</span>: no-repeat;</span><br><span class="language-css">        <span class="hljs-attribute">background-size</span>: <span class="hljs-number">113px</span> <span class="hljs-number">86.5px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">36px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">        <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box-1</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box-2</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">38.5px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box-3</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">77px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box-4</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> -<span class="hljs-number">44.5px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box-1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box-2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box-4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-13.html" height="70" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="9-背景图片大小-background-size"><a href="#9-背景图片大小-background-size" class="headerlink" title="9.背景图片大小 background-size"></a>9.背景图片大小 background-size</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-size</span>: 宽度 高度;<br></code></pre></td></tr></table></figure><table><thead><tr><th>取值</th><th>场景</th></tr></thead><tbody><tr><td>数字+px</td><td>简单方便</td></tr><tr><td>百分比</td><td>相对于当前盒子自身的宽高百分比</td></tr><tr><td>contain</td><td>包含，背景图等比缩放，直到不会超出盒子的最大，可能有留白</td></tr><tr><td>cover</td><td>覆盖，背景图等比缩放，直到刚好填满整个盒子没有空白，图片可能显示不全</td></tr></tbody></table><p>background 连写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>： <span class="hljs-attribute">color</span> image repeat <span class="hljs-attribute">position</span>/size;<br></code></pre></td></tr></table></figure><h2 id="10-盒子阴影-box-shadow"><a href="#10-盒子阴影-box-shadow" class="headerlink" title="10.盒子阴影 box-shadow"></a>10.盒子阴影 box-shadow</h2><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>h-shadow</td><td>必须，水平偏移量，允许负值</td></tr><tr><td>v-shadow</td><td>必须，垂直偏移量，允许负值</td></tr><tr><td>blur</td><td>可选，模糊度</td></tr><tr><td>spread</td><td>可选，阴影扩大</td></tr><tr><td>color</td><td>可选，阴影颜色</td></tr><tr><td>inset</td><td>可选，将阴影改为内部阴影</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">50px</span> <span class="hljs-number">8px</span> <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-14.html" height="120" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="11-过渡-transition"><a href="#11-过渡-transition" class="headerlink" title="11.过渡 transition"></a>11.过渡 transition</h2><ul><li>常配合 hover 使用</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition</span> 属性 时长, 属性 时长;<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>取值</th></tr></thead><tbody><tr><td>过渡属性</td><td>所有属性 all；具体属性 width</td></tr><tr><td>过渡时长</td><td>数字 + s(秒)</td></tr></tbody></table><p>注意：</p><ul><li>过渡需要默认状态和 hover 样式不同，才能有过渡效果</li><li>transition 属性给需要过渡的元素本身加</li><li>transition 属性设置在不同状态中，效果不同<ul><li>给默认状态设置，鼠标移入移出都有过渡效果</li><li>给 hover 状态设置，鼠标移入有过渡效果，移出没有过渡效果</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">        <span class="hljs-attribute">transition</span>: all <span class="hljs-number">2s</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-decorate-15.html" height="120" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS 定位</title>
    <link href="/2022/04/03/10.CSS%20%E5%AE%9A%E4%BD%8D/"/>
    <url>/2022/04/03/10.CSS%20%E5%AE%9A%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS 定位"></a>CSS 定位</h1><h2 id="网页常见布局方式"><a href="#网页常见布局方式" class="headerlink" title="网页常见布局方式"></a>网页常见布局方式</h2><ol><li>标准流</li></ol><ul><li>块级元素独占一行 -&gt; 垂直布局</li><li>行内元素/行内块元素一行显示多个 -&gt; 水平布局</li></ul><ol><li>浮动</li></ol><ul><li>原本垂直布局的块级元素变成水平布局</li></ul><ol><li>定位</li></ol><ul><li>可以让元素自由的摆放在网页的任意位置</li><li>一般用于盒子之间的层叠情况</li><li>让盒子固定在页面某一位置</li></ul><h2 id="使用定位"><a href="#使用定位" class="headerlink" title="使用定位"></a>使用定位</h2><ol><li>设置定位方式</li></ol><p>属性名: position</p><table><thead><tr><th>定位方式</th><th>属性值</th></tr></thead><tbody><tr><td>静态定位</td><td>static</td></tr><tr><td>相对定位</td><td>relative</td></tr><tr><td>绝对定位</td><td>absolute</td></tr><tr><td>固定定位</td><td>fixed</td></tr></tbody></table><ol><li>设置偏移值</li></ol><ul><li>偏移值可以设置水平和垂直方向</li><li>选取原则：就近原则</li></ul><ol start="2"><li>偏移方向</li></ol><ul><li>水平距离左边 left</li><li>水平距离右边 right</li><li>垂直距离上边 top</li><li>垂直距离下边 bottom</li></ul><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><ul><li>占有原来的位置</li><li>相对于自己之前的位置</li><li>不改变显示模式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">position</span>: relative<br>left: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br></code></pre></td></tr></table></figure><blockquote><p>Tips: 如果 4 个定位都有，以 top 和 left 为准</p></blockquote><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><ul><li>相对于非静态定位的父元素定位</li><li>不占有原来的位置</li><li>改变显示模式</li><li>默认以浏览器 body 定位</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">position</span>: absolue<br>left: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br></code></pre></td></tr></table></figure><ul><li>子绝父相：父级相对定位，子级绝对定位</li><li>绝对定位查找父级的方法：逐级向上最近的有定位的父元素，最终是浏览器窗口</li></ul><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">positions: fixed;<br></code></pre></td></tr></table></figure><p>特点：</p><ul><li>脱标-不占位置</li><li>相对于浏览器定位</li><li>具备行内块特点</li></ul><h3 id="元素层级关系"><a href="#元素层级关系" class="headerlink" title="元素层级关系"></a>元素层级关系</h3><ol><li>不同布局方式元素的层级关系：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">标准流 &lt; 浮动 &lt; 定位<br></code></pre></td></tr></table></figure><ol><li>同层级，后写的会覆盖在先写的元素</li><li>设置元素层级</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 默认值0；数值越大，显示越靠前 */</span><br><span class="hljs-attribute">z-index</span>: 数值;<br></code></pre></td></tr></table></figure><h2 id="案例：子盒子在父盒子中水平居中"><a href="#案例：子盒子在父盒子中水平居中" class="headerlink" title="案例：子盒子在父盒子中水平居中"></a>案例：子盒子在父盒子中水平居中</h2><p>方式一：margin</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box-wrap</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">        <span class="hljs-comment">/* 手动计算盒子的一半 */</span></span><br><span class="language-css">        <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">150px</span>;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-wrap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-position-1.html" height="520" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>方式二：transform</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box-wrap</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 移动自身一半 */</span></span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-wrap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-position-2.html" height="520" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS 浮动</title>
    <link href="/2022/04/03/9.CSS%20%E6%B5%AE%E5%8A%A8/"/>
    <url>/2022/04/03/9.CSS%20%E6%B5%AE%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><ul><li>元素：HTML 标签</li><li>伪元素：CSS 模拟出标签效果，装饰性内容</li></ul><table><thead><tr><th>伪元素</th><th>作用</th></tr></thead><tbody><tr><td>::before</td><td>在父元素内容的最前添加一个伪元素</td></tr><tr><td>::after</td><td>在父元素内容的最后添加一个伪元素</td></tr></tbody></table><p>注意点：</p><ul><li>必须设置 content 属性才能生效</li><li>伪元素默认是行内元素</li></ul><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>; // 必须加属性<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h3><p>标准流：又称为文档流，浏览器排列元素的规则</p><p>常见标准流的排版规则</p><ul><li>块级元素：从上往下，垂直布局，独占一行</li><li>行内元素或行内块元素：从左往右，水平布局，空间不够自动折行</li></ul><h3 id="浮动-1"><a href="#浮动-1" class="headerlink" title="浮动"></a>浮动</h3><ul><li>早期：图文环绕</li><li>现在：网页布局</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">float</span>: left/right;<br></code></pre></td></tr></table></figure><p>行内元素或行内块元素换行书写会产生一个空格</p><p>浮动的特点</p><ul><li>浮动的标签默认顶对齐，可使用 margin-top 修改距离顶部距离</li><li>浮动元素会脱离标准流（脱标），在标准流中不占用位置</li><li>浮动元素比标准流高半个级别，可以覆盖标准流中的元素</li><li>浮动找浮动，下一个浮动元素会在上一个浮动元素后面，左右浮动</li><li>浮动标签具备行内块特点：</li></ul><ol><li>一行显示多个</li><li>可设置宽高</li></ol><blockquote><p>浮动之后盒子水平居中不生效 margin: 0 auto;</p></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 初始化样式 */</span></span><br><span class="language-css">    * &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 清除list圆点样式 */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 外层容器 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">620px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 左边 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">620px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 右边 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">        <span class="hljs-comment">/* background-color: green; */</span></span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">620px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">780px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">180px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">        <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 第1个子元素和第5个子元素 */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>n + <span class="hljs-number">1</span>) &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-float-3.html" height="640" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>CSS 书写顺序</p><ul><li>浮动 / display</li><li>盒子模型 margin border padding 宽度高度背景色</li><li>文字样式</li></ul><p>常用 css</p><ul><li>内减模式：box-sizing: border-box;</li><li>版心居中： margin: 0 auto;</li></ul><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p><strong>清除浮动带来的影响</strong></p><p>影响：如果子元素浮动了，此时子元素不能撑开标准流的块级父元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 初始化样式 */</span></span><br><span class="language-css">    * &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 外层容器 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        <span class="hljs-comment">/* margin: 0 auto; */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 左边 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 右边 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: green;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"> <span class="hljs-comment">/* 只要是通栏的盒子(和浏览器一样宽) 不需要指定宽度 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.footer</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: saddlebrown;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 期望footer元素紧跟box下面排列 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-float-4.html" height="220" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h4 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h4><h5 id="1-直接设置父元素高度"><a href="#1-直接设置父元素高度" class="headerlink" title="1.直接设置父元素高度"></a>1.直接设置父元素高度</h5><h5 id="2-额外标签"><a href="#2-额外标签" class="headerlink" title="2.额外标签"></a>2.额外标签</h5><ul><li>在父元素内容的最后添加一个块级元素</li><li>给添加的块级元素设置 clear:both;</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span> &#123;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-单伪元素清除法"><a href="#3-单伪元素清除法" class="headerlink" title="3.单伪元素清除法"></a>3.<strong>单伪元素清除法</strong></h5><p>用伪元素替代了额外标签</p><p>优点：直接给标签加类即可清除浮动</p><p><strong>（1）基本写法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;   <span class="hljs-comment">/*必须要有*/</span><br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（2）补充写法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">clear</span>: both;<br><br>  <span class="hljs-comment">/* 兼容低版本IE */</span><br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-双伪元素清除法"><a href="#4-双伪元素清除法" class="headerlink" title="4.双伪元素清除法"></a>4.双伪元素清除法</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::before</span>,    <span class="hljs-comment">/* 解决外边距塌陷问题 */</span><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">display</span>: table;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-给父元素设置-overflow-hidden"><a href="#6-给父元素设置-overflow-hidden" class="headerlink" title="6.给父元素设置 overflow:hidden"></a>6.给父元素设置 overflow:hidden</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>: hidden;Copy <span class="hljs-selector-tag">to</span> clipboardErrorCopied<br>&lt;style&gt;<br>    <span class="hljs-comment">/* 初始化样式 */</span><br>    * &#123;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 外层容器 */</span><br>    <span class="hljs-selector-class">.box</span> &#123;<br>        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;<br>        <span class="hljs-comment">/* margin: 0 auto; */</span><br>    &#125;<br><br>    <span class="hljs-comment">/* 左边 */</span><br>    <span class="hljs-selector-class">.left</span> &#123;<br>        <span class="hljs-attribute">float</span>: left;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">background-color</span>: pink;<br>    &#125;<br><br>    <span class="hljs-comment">/* 右边 */</span><br>    <span class="hljs-selector-class">.right</span> &#123;<br>        <span class="hljs-attribute">float</span>: right;<br>        <span class="hljs-attribute">background-color</span>: green;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.footer</span> &#123;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">background-color</span>: saddlebrown;<br>    &#125;<br><br>    <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::before</span>,<br>    <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>        <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-attribute">display</span>: table;<br>    &#125;<br><br>    <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>        <span class="hljs-attribute">clear</span>: both;<br>    &#125;<br>&lt;/style&gt;<br><br>&lt;!-- 清除浮动 --&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;box clearfix&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-attribute">left</span>&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-attribute">right</span>&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br>&lt;!-- 期望<span class="hljs-selector-tag">footer</span>元素紧跟box下面排列 --&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-selector-tag">footer</span>&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-float-5.html" height="240" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS 特性</title>
    <link href="/2022/04/03/8.CSS%20%E7%89%B9%E6%80%A7/"/>
    <url>/2022/04/03/8.CSS%20%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS-特性"><a href="#CSS-特性" class="headerlink" title="CSS 特性"></a>CSS 特性</h1><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><p>（1）子元素有默认继承父元素样式的特点</p><p>可继承的常见属性（文字属性都可以继承）</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs html">color font-style font-weight font-size font-family <br>text-align text-indent<br>line-height Copy to <br></code></pre></td></tr></table></figure><p>通过调试工具判断样式是否可继承</p><p>（2）继承失效的特殊情况</p><p>如果元素有浏览器默认样式，就不继承父元素属性</p><ul><li>a 标签的 color 会继承时效</li><li>h 系列标签的 font-size 会继承失效</li></ul><p>示例 ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>将进酒<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>李白 〔唐代〕<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>君不见黄河之水天上来，奔流到海不复回。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-inherited-1.html" height="200" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h2><p>同一个标签设置<code>不同</code>的样式</p><ul><li>样式<code>层叠叠加</code>，共同作用在标签上</li></ul><p>同一个标签设置<code>相同</code>的样式</p><ul><li>样式会<code>层叠覆盖</code>，最终写在最后的样式生效</li></ul><p>当样式冲突时，只有当选择器优先级相同时，才能通过层叠性判断结果</p><blockquote><p>技巧: 编辑器多行输入</p></blockquote><p>示例 ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.color--red</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 绿色的定义位置在红色之后 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.color--green</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.font-size--20</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;color--green color--red font-size--20&quot;</span>&gt;</span><br>    君不见黄河之水天上来，奔流到海不复回。<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-cascade-1.html" height="50" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>不同选择器具有不同的优先级，</p><p>优先级高的选择器样式会覆盖优先级低的选择器</p><p>（1）优先级公式（由低到高）</p><ul><li>继承</li><li>通配符选择器</li><li>标签选择器</li><li>类选择器</li><li>id 选择器</li><li>行内样式</li><li>!important（慎重使用）</li></ul><p>总结：选择范围越小，优先级越高</p><p>（2）复合选择器权重叠加</p><p>计算公式，每级之间不进位</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">（<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>）<br><br><span class="hljs-comment">(行内, ID, 类, 标签)</span><br></code></pre></td></tr></table></figure><ul><li>第一级 行内样式个数</li><li>第二级 id 选择器个数</li><li>第三级 类选择器个数</li><li>第四级 标签选择器个数</li></ul><p>需要注意：</p><ul><li>!important 权重最高</li><li>继承权重最低</li></ul><blockquote><p>chrome 调试: 元素右键 -&gt; 检查元素</p></blockquote><p>工具：PxCook <a href="https://www.fancynode.com.cn/pxcook">https://www.fancynode.com.cn/pxcook</a></p><p>示例 1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* (行内，id, 类，标签) */</span></span><br><span class="language-css">    <span class="hljs-comment">/* (0, 2, 0, 0) */</span></span><br><span class="language-css">    <span class="hljs-selector-id">#father</span> <span class="hljs-selector-id">#son</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* (0, 1, 1, 1) */</span></span><br><span class="language-css">    <span class="hljs-selector-id">#father</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.c2</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* (0, 0, 2, 2) */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.c1</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.c2</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 继承 */</span></span><br><span class="language-css">    <span class="hljs-selector-id">#father</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green <span class="hljs-meta">!important</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 继承 */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#father</span><span class="hljs-selector-class">.c1</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: yellow;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;son&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span>白日依山尽，黄河入海流。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-priority-1.html" height="50" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>示例 2：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* (行内，id, 类，标签) */</span></span><br><span class="language-css">    <span class="hljs-comment">/* (0, 0, 0, 2) */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: skyblue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* (0, 0, 0, 1) */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>白日依山尽，黄河入海流。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-priority-2.html" height="50" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>示例 3：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* (行内，id, 类，标签) */</span></span><br><span class="language-css">    <span class="hljs-comment">/* (0, 0, 0, 7) */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* (0, 0, 1, 0) */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.one</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>白日依山尽，黄河入海流。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-priority-3.html" height="50" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>示例 4：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* (行内，id, 类，标签) */</span></span><br><span class="language-css">    <span class="hljs-comment">/* (0, 0, 2, 1) */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.c1</span> <span class="hljs-selector-class">.c2</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* (0, 1, 0, 1) */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> <span class="hljs-selector-id">#box3</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* (0, 1, 0, 1) */</span></span><br><span class="language-css">    <span class="hljs-selector-id">#box1</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box2&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box3&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c3&quot;</span>&gt;</span>白日依山尽，黄河入海流。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-priority-4.html" height="50" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>示例 5：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* (行内，id, 类，标签) */</span></span><br><span class="language-css">    <span class="hljs-comment">/* 都是继承，最近的父级生效 */</span></span><br><span class="language-css">    <span class="hljs-comment">/* 继承 */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 继承 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.father</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>白日依山尽，黄河入海流。<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-priority-5.html" height="50" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS 盒子模型</title>
    <link href="/2022/04/03/7.CSS%20%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/04/03/7.CSS%20%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h1><h2 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h2><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><ul><li>独占一行</li><li>宽度默认为父元素 100%；高度默认由元素撑开</li><li>可以设置宽度和高度</li></ul><p>代表标签</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span> h <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">dl</span> <span class="hljs-selector-tag">dt</span> <span class="hljs-selector-tag">dd</span> <span class="hljs-selector-tag">form</span><br><span class="hljs-selector-tag">header</span> <span class="hljs-selector-tag">nav</span> <span class="hljs-selector-tag">footer</span><br></code></pre></td></tr></table></figure><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><ul><li>宽度和高度默认由内容撑开</li><li>不可以设置宽度和高度</li></ul><p>代表标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">span</span> <span class="hljs-selector-tag">b</span> u <span class="hljs-selector-tag">i</span> s <span class="hljs-selector-tag">strong</span> <span class="hljs-selector-tag">ins</span> <span class="hljs-selector-tag">em</span> <span class="hljs-selector-tag">del</span> <br></code></pre></td></tr></table></figure><h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><ul><li>一行显示多个</li><li>可以设置宽度和高度</li></ul><p>代表标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span> <span class="hljs-selector-tag">textarea</span> <span class="hljs-selector-tag">button</span> select<br></code></pre></td></tr></table></figure><h3 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span>: block;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>block</td><td>块级元素</td></tr><tr><td>inline-block</td><td>行内块元素</td></tr><tr><td>inline</td><td>行内元素</td></tr></tbody></table><h3 id="嵌套规范注意点"><a href="#嵌套规范注意点" class="headerlink" title="嵌套规范注意点"></a>嵌套规范注意点</h3><ul><li>块级元素一般作为大容器;</li><li>可以嵌套文本、块级元素、行内元素、行内块元素</li></ul><blockquote><p>p 标签中不要嵌套 div p h 等块级元素</p></blockquote><ul><li>a 标签内部可以嵌套任意内容</li></ul><blockquote><p>a 标签不能嵌套 a 标签</p></blockquote><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>（1）盒子</p><p>标签可以看做是一个盒子</p><p>（2）盒子模型：</p><ul><li>外边距区域 margin</li><li>边框区域 border</li><li>内边距区域 padding</li><li>内容区域 content</li></ul><p>（3）盒子内容的宽高</p><ul><li>width</li><li>height</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="边框-border"><a href="#边框-border" class="headerlink" title="边框 border"></a>边框 border</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 粗细 线条样式 颜色（不分先后顺序）*/</span><br><span class="hljs-comment">/* 默认4个方向都有*/</span><br><span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;<br><br><span class="hljs-comment">/* 单个方向 */</span><br><span class="hljs-attribute">border-top</span>: <span class="hljs-number">10px</span> solid red;<br><span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">10px</span> solid red;<br><span class="hljs-attribute">border-left</span>: <span class="hljs-number">10px</span> solid red;<br><span class="hljs-attribute">border-right</span>: <span class="hljs-number">10px</span> solid red;<br><br><span class="hljs-comment">/* 单个属性 */</span><br><span class="hljs-attribute">border-width</span>: 边框粗细<br>border-style: 边框样式<br>border-color: 边框颜色<br></code></pre></td></tr></table></figure><p>线条可选样式</p><ul><li>solid 实线</li><li>dashed 虚线</li><li>dotted 点线</li></ul><p>布局顺序：从外到内，从上到下</p><h3 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距 padding"></a>内边距 padding</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 可取 4 个值、3 个值、2 个值、1 个值 */</span><br><span class="hljs-attribute">padding</span>: 上 右 下 左;<br><span class="hljs-attribute">padding</span>: 上 左右 下;<br><span class="hljs-attribute">padding</span>: 上下 左右;<br><span class="hljs-attribute">padding</span>: 上下左右;<br><br><span class="hljs-comment">/* 单个方向 */</span><br><span class="hljs-attribute">padding-top</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">padding-left</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>;<br></code></pre></td></tr></table></figure><p>规律：顺时针，值不够看对边</p><h3 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距 margin"></a>外边距 margin</h3><p>设置值的方式和 padding 类似</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 可取 4 个值、3 个值、2 个值、1 个值 */</span><br><span class="hljs-attribute">margin</span>: 上 右 下 左;<br><span class="hljs-attribute">margin</span>: 上 左右 下;<br><span class="hljs-attribute">margin</span>: 上下 左右;<br><span class="hljs-attribute">margin</span>: 上下左右;<br><br><span class="hljs-comment">/* 单个方向 */</span><br><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br></code></pre></td></tr></table></figure><p>使用 margin 让元素居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="盒子尺寸计算"><a href="#盒子尺寸计算" class="headerlink" title="盒子尺寸计算"></a>盒子尺寸计算</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">content</span>-<span class="hljs-built_in">box</span> 默认<br>盒子最终宽度 = <span class="hljs-built_in">width</span>(<span class="hljs-built_in">content</span>) + padding + <span class="hljs-built_in">border</span><br><br><span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span><br>盒子最终宽度 = <span class="hljs-built_in">width</span> = padding + <span class="hljs-built_in">border</span> + <span class="hljs-built_in">content</span> <br></code></pre></td></tr></table></figure><h3 id="清除浏览器默认样式"><a href="#清除浏览器默认样式" class="headerlink" title="清除浏览器默认样式"></a>清除浏览器默认样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用的清除样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br></code></pre></td></tr></table></figure><p>去掉列表前的符号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="行内标签的-margin-padding"><a href="#行内标签的-margin-padding" class="headerlink" title="行内标签的 margin/padding"></a>行内标签的 margin/padding</h3><p>垂直方向不生效，使用行高 line-height 实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#eee</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>乾坤空落落，岁月去堂堂。<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="外边距合并现象与塌陷现象"><a href="#外边距合并现象与塌陷现象" class="headerlink" title="外边距合并现象与塌陷现象"></a>外边距合并现象与塌陷现象</h3><p>（1）合并现象</p><ul><li>场景：垂直布局的块级元素，上下的 margin 会合并</li><li>结果：最终两者距离为 margin 的最大值</li><li>解决方法：只给其中一个盒子设置 margin</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box-1</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#698e6a</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box-2</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7f9faf</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-box-2.html" height="400" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>（2）塌陷现象</p><ul><li>场景：相互嵌套的块级元素，子元素的 margin-top 会作用在父元素上</li><li>结果：导致父元素一起往下移动</li><li>解决方法：</li></ul><ol><li>给父元素设置 border-top 或者 padding-top(分隔父子元素的 margin-top)</li><li>给父元素设置 overflow:hidden;</li><li>转换为行内块元素</li><li>设置浮动</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box-father</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#b2b6b6</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box-child</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7f9faf</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.resolve</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-wrap&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 元素的margin-top 作用在了父元素上 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-child&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- [完美解决方案]给父元素设置 overflow:hidden; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-father resolve&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-child&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-box-3.html" height="530" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="导航实例"><a href="#导航实例" class="headerlink" title="导航实例"></a>导航实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">border-top</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ff8500</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">#edeef0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* 先写盒子大小 */</span></span><br><span class="language-css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 推荐先写上背景，便于查看盒子大小 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* background-color: #edeef0; */</span></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 再写文字样式 */</span></span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#4c4c4c</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 鼠标悬停效果 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#edeef0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff8044</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>文章<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分类<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-box-1.html" height="70" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS 背景相关属性</title>
    <link href="/2022/04/03/6.CSS%20%E8%83%8C%E6%99%AF%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7/"/>
    <url>/2022/04/03/6.CSS%20%E8%83%8C%E6%99%AF%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS-背景相关属性"><a href="#CSS-背景相关属性" class="headerlink" title="CSS 背景相关属性"></a>CSS 背景相关属性</h1><h2 id="背景颜色-background-color"><a href="#背景颜色-background-color" class="headerlink" title="背景颜色 background-color"></a>背景颜色 background-color</h2><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 默认背景色是透明；背景色在背景图之下*/</span><br><span class="hljs-attribute">background-color</span>: transparent;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">3</span>);   //背景半透明<br></code></pre></td></tr></table></figure><h2 id="背景图片-background-image"><a href="#背景图片-background-image" class="headerlink" title="背景图片 background-image"></a>背景图片 background-image</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">图片路径</span>);<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* 元素必须给一个尺寸才能显示背景图 */</span></span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://cn.bing.com/th?id=OHR.FanjingStairs_ZH-CN0360402048_UHD.jpg&amp;rf=LaDigue_UHD.jpg&amp;w=300&amp;h=300&amp;c=8&amp;rs=1&amp;o=3&amp;r=0</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-background-1.html" height="540" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="背景平铺-background-repeat"><a href="#背景平铺-background-repeat" class="headerlink" title="背景平铺 background-repeat"></a>背景平铺 background-repeat</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-repeat</span>：no-repeat;<br></code></pre></td></tr></table></figure><table><thead><tr><th>取值</th><th>效果</th></tr></thead><tbody><tr><td>repeat</td><td>（默认值）水平和垂直方向都平铺</td></tr><tr><td>no-repeat</td><td>不平铺</td></tr><tr><td>repeat-x</td><td>水平方向平铺（x 轴）</td></tr><tr><td>repeat-y</td><td>垂直方向平铺（y 轴）</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-comment">/* 元素必须给一个尺寸才能显示背景图 */</span></span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://cn.bing.com/th?id=OHR.FanjingStairs_ZH-CN0360402048_UHD.jpg&amp;rf=LaDigue_UHD.jpg&amp;w=300&amp;h=300&amp;c=8&amp;rs=1&amp;o=3&amp;r=0</span>);</span><br><span class="language-css">        <span class="hljs-attribute">background-repeat</span>: no-repeat;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-background-2.html" height="540" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="背景位置-background-position"><a href="#背景位置-background-position" class="headerlink" title="背景位置 background-position"></a>背景位置 background-position</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-position</span>: 水平方向位置 垂直方向位置;<br></code></pre></td></tr></table></figure><p>属性值</p><p>方位名词（最多只能表示 9 个位置）</p><ul><li>水平方向：left center right</li><li>垂直方向：top center bottom</li></ul><p>数字+px（坐标）</p><ul><li>坐标轴 原点(0,0) 盒子的左上角</li><li>x 轴 水平方向</li><li>y 轴 垂直方向</li><li>图片左上角与坐标原点重合</li></ul><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>        <span class="hljs-selector-tag">div</span> &#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>            <span class="hljs-attribute">background-color</span>: pink;<br>            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/logo.png</span>);<br>            <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>            <span class="hljs-comment">/* background-position:  方位名词; */</span><br>            <span class="hljs-comment">/* background-position: center top; */</span><br>            <span class="hljs-comment">/* background-position: right center; */</span><br>            <span class="hljs-comment">/* 如果是方位名词  right center 和 center right 效果是等价的 跟顺序没有关系 */</span><br>            <span class="hljs-comment">/* background-position: center right; */</span><br>            <span class="hljs-comment">/* 此时 水平一定是靠右侧对齐  第二个参数省略 y 轴是 垂直居中显示的 */</span><br>            <span class="hljs-comment">/* background-position: right; */</span><br>            <span class="hljs-comment">/* 此时 第一个参数一定是 top y轴 顶部对齐   第二个参数省略x  轴是 水平居中显示的 */</span><br>            <span class="hljs-attribute">background-position</span>: top;<br>        &#125;<br>    &lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>        <span class="hljs-selector-tag">div</span> &#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>            <span class="hljs-attribute">background-color</span>: pink;<br>            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/logo.png</span>);<br>            <span class="hljs-attribute">background-repeat</span>&lt;style&gt;<br>        <span class="hljs-selector-tag">div</span> &#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>            <span class="hljs-attribute">background-color</span>: pink;<br>            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/logo.png</span>);<br>            <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>            <span class="hljs-comment">/* 20px 50px; x轴一定是 20  y轴一定是 50 */</span><br>            <span class="hljs-comment">/* background-position: 20px 50px; */</span><br>            <span class="hljs-comment">/* background-position: 50px 20px; */</span><br>            <span class="hljs-attribute">background-position</span>: <span class="hljs-number">20px</span>;<br><br>        &#125;<br>    &lt;/style&gt;: no-repeat;<br>            <span class="hljs-comment">/* 20px center  一定是x 为 20  y 是 center  等价于   background-position: 20px */</span><br>            <span class="hljs-comment">/* background-position: 20px center; */</span><br>            <span class="hljs-comment">/* 水平是居中对齐  垂直是 20 */</span><br>            <span class="hljs-attribute">background-position</span>: center <span class="hljs-number">20px</span>;<br><br>        &#125;<br>    &lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>        <span class="hljs-selector-tag">div</span> &#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>            <span class="hljs-attribute">background-color</span>: pink;<br>            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/logo.png</span>);<br>            <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>            <span class="hljs-comment">/* 20px 50px; x轴一定是 20  y轴一定是 50 */</span><br>            <span class="hljs-comment">/* background-position: 20px 50px; */</span><br>            <span class="hljs-comment">/* background-position: 50px 20px; */</span><br>            <span class="hljs-attribute">background-position</span>: <span class="hljs-number">20px</span>;<br><br>        &#125;<br>    &lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* 元素必须给一个尺寸才能显示背景图 */</span></span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://cn.bing.com/th?id=OHR.FanjingStairs_ZH-CN0360402048_UHD.jpg&amp;rf=LaDigue_UHD.jpg&amp;w=300&amp;h=300&amp;c=8&amp;rs=1&amp;o=3&amp;r=0</span>);</span><br><span class="language-css">        <span class="hljs-attribute">background-repeat</span>: no-repeat;</span><br><span class="language-css">        <span class="hljs-attribute">background-position</span>: center;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-background-3.html" height="540" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="背景固定-background-attachment"><a href="#背景固定-background-attachment" class="headerlink" title="背景固定 background-attachment"></a>背景固定 background-attachment</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-attachment</span>: fixed;<br></code></pre></td></tr></table></figure><h2 id="背景属性连写"><a href="#背景属性连写" class="headerlink" title="背景属性连写"></a>背景属性连写</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 不分先后顺序 */</span><br><span class="hljs-attribute">background</span>: color image repeat position;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* 元素必须给一个尺寸才能显示背景图 */</span></span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-css">        两种写法等价</span></span><br><span class="hljs-comment"><span class="language-css">        background-color: #fff;</span></span><br><span class="hljs-comment"><span class="language-css">        background-image: url(https://cn.bing.com/th?id=OHR.FanjingStairs_ZH-CN0360402048_UHD.jpg&amp;rf=LaDigue_UHD.jpg&amp;w=300&amp;h=300&amp;c=8&amp;rs=1&amp;o=3&amp;r=0);</span></span><br><span class="hljs-comment"><span class="language-css">        background-repeat: no-repeat;</span></span><br><span class="hljs-comment"><span class="language-css">        background-position: center;</span></span><br><span class="hljs-comment"><span class="language-css">        */</span></span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span> <span class="hljs-built_in">url</span>(<span class="hljs-string">https://cn.bing.com/th?id=OHR.FanjingStairs_ZH-CN0360402048_UHD.jpg&amp;rf=LaDigue_UHD.jpg&amp;w=300&amp;h=300&amp;c=8&amp;rs=1&amp;o=3&amp;r=0</span>) no-repeat center;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-background-4.html" height="540" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="img-标签和背景图片区别"><a href="#img-标签和背景图片区别" class="headerlink" title="img 标签和背景图片区别"></a>img 标签和背景图片区别</h2><p>img</p><ul><li>不设置高宽会默认显示</li><li>重要突出的图使用 img</li></ul><p>background-image</p><ul><li>需要设置元素尺寸</li><li>装饰性图片使用背景图</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS 选择器</title>
    <link href="/2022/04/03/5.CSS%20%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2022/04/03/5.CSS%20%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h1><h2 id="颜色取值"><a href="#颜色取值" class="headerlink" title="颜色取值"></a>颜色取值</h2><ul><li>文字颜色 color</li><li>背景颜色 background-color</li></ul><table><thead><tr><th>颜色表示方式</th><th>表示含义</th><th>属性值</th></tr></thead><tbody><tr><td>关键词</td><td>预定义的颜色名</td><td>red、green、blue</td></tr><tr><td>rbg 表示法</td><td>红绿蓝三原色，取值 0-255</td><td>rgb(0,0,0)</td></tr><tr><td>rgba 表示法</td><td>红绿蓝三原色+透明度，取值 0-1</td><td>rgba(0, 0, 0, 0.5)</td></tr><tr><td>十六进制表示法</td><td>#开头</td><td>#000000 简写 #000</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: green;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: rgb(0, 255, 0);&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: rgba(0, 255, 0, 0.5);&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #00FF00;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #0F0;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br></code></pre></td></tr></table></figure><p>div、p、h 需要设置元素的宽度，否则会自动撑满父元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 0 auto; width:200px; border: 1px solid #cccccc; text-align: center;&quot;</span>&gt;</span><br>  Hello World!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="1、复合选择器"><a href="#1、复合选择器" class="headerlink" title="1、复合选择器"></a>1、复合选择器</h3><h4 id="（1）后代选择器"><a href="#（1）后代选择器" class="headerlink" title="（1）后代选择器"></a>（1）后代选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">父选择器 后代选择器: &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（2）子代选择器"><a href="#（2）子代选择器" class="headerlink" title="（2）子代选择器"></a>（2）子代选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">父选择器 &gt; 子代选择器: &#123; &#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、并集选择器"><a href="#2、并集选择器" class="headerlink" title="2、并集选择器"></a>2、并集选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器<span class="hljs-number">1</span>, 选择器<span class="hljs-number">2</span>: &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span>,</span><br><span class="language-css">    <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、交集选择器"><a href="#3、交集选择器" class="headerlink" title="3、交集选择器"></a>3、交集选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器<span class="hljs-number">1</span>选择器<span class="hljs-number">2</span>: &#123; &#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4、hover-伪类选择器"><a href="#4、hover-伪类选择器" class="headerlink" title="4、hover 伪类选择器"></a>4、hover 伪类选择器</h3><p>鼠标悬停状态</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器<span class="hljs-selector-pseudo">:hover</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、结构伪类选择器"><a href="#5、结构伪类选择器" class="headerlink" title="5、结构伪类选择器"></a>5、结构伪类选择器</h3><ul><li>作用：根据元素在 HTML 中的结构关系查找元素</li><li>优势：减少对 HTML 中类的依赖，有利于保持代码整洁</li><li>场景：常用于查找某父级选择器中的子元素</li></ul><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>E:first-child</td><td>父元素中的第一个子元素 E</td></tr><tr><td>E:last-child</td><td>父元素中的最后一个子元素 E</td></tr><tr><td>E:nth-child(n)</td><td>父元素中的第 n 个子元素 E</td></tr><tr><td>E:nth-last-child(n)</td><td>父元素中的倒数第 n 个子元素 E</td></tr></tbody></table><p>n 可以写公式</p><p>n 可取值：0 1 2 3 4…</p><table><thead><tr><th>功能</th><th>公式</th></tr></thead><tbody><tr><td>偶数</td><td>2n even</td></tr><tr><td>奇数</td><td>2n+1 2n-1 odd</td></tr><tr><td>找到前 5 个</td><td>-n+5</td></tr><tr><td>找到从第 5 个往后</td><td>n+5</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first</span>-child &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- ul&gt;li&#123;第$个li&#125;*8 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第1个li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第2个li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第3个li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第4个li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第5个li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第6个li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第7个li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第8个li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/css-float-1.html" height="220" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Emmet-语法"><a href="#Emmet-语法" class="headerlink" title="Emmet 语法"></a>Emmet 语法</h2><ul><li>简写语法，快速生成代码</li><li>VS Code 等代码编辑器自带</li></ul><table><thead><tr><th>语法</th><th>示例</th><th>效果</th></tr></thead><tbody><tr><td>标签名</td><td>div</td><td><code>&lt;div&gt;&lt;/div&gt;</code></td></tr><tr><td>类选择器</td><td>.red</td><td><code>&lt;div class=&quot;red&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td>id 选择器</td><td>#one</td><td><code>&lt;div id=&quot;one&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td>交集选择器</td><td>p.red#one</td><td><code>&lt;p class=&quot;red&quot; id=&quot;one&quot;&gt;&lt;/p&gt;</code></td></tr><tr><td>子代选择器</td><td>ul&gt;li</td><td><code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></td></tr><tr><td>内部文本</td><td>ul&gt;li{内容}</td><td><code>&lt;ul&gt;&lt;li&gt;Hello&lt;/li&gt;&lt;/ul&gt;</code></td></tr><tr><td>创建多个</td><td>ul&gt;li*3</td><td><code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></td></tr><tr><td>创建自增</td><td>ul&gt;li{$}*3</td><td><code>&lt;ul&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;/ul&gt;</code></td></tr><tr><td>同级</td><td>div+p</td><td><code>&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</code></td></tr></tbody></table><p><strong>css 提示</strong></p><table><thead><tr><th>单词首字母</th><th>效果</th></tr></thead><tbody><tr><td>fw</td><td>font-weight</td></tr><tr><td>w</td><td>width</td></tr><tr><td>h</td><td>height</td></tr><tr><td>bgc</td><td>backgroud-color</td></tr><tr><td>lh</td><td>line-height</td></tr><tr><td>w300+h200</td><td><code>width: 300px;height: 200px;</code></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS 字体和文本样式</title>
    <link href="/2022/04/03/4.CSS%20%E5%AD%97%E4%BD%93%E5%92%8C%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/"/>
    <url>/2022/04/03/4.CSS%20%E5%AD%97%E4%BD%93%E5%92%8C%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS-字体和文本样式"><a href="#CSS-字体和文本样式" class="headerlink" title="CSS 字体和文本样式"></a>CSS 字体和文本样式</h1><h2 id="字体大小-font-size"><a href="#字体大小-font-size" class="headerlink" title="字体大小 font-size"></a>字体大小 font-size</h2><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 浏览器默认字体大小 16px */</span><br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>&lt;<span class="hljs-selector-tag">div</span> style=&quot;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;&quot;&gt;Hello World!&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> style=&quot;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">26px</span>;&quot;&gt;Hello World!&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="字体粗细-font-weight"><a href="#字体粗细-font-weight" class="headerlink" title="字体粗细 font-weight"></a>字体粗细 font-weight</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>数值</th><th>效果</th></tr></thead><tbody><tr><td>normal</td><td>400</td><td>正常</td></tr><tr><td>bold</td><td>700</td><td>加粗</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight: normal&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight: bold&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h2 id="字体样式-font-style"><a href="#字体样式-font-style" class="headerlink" title="字体样式 font-style"></a>字体样式 font-style</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-style</span>: normal;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>normal</td><td>正常</td></tr><tr><td>italic</td><td>倾斜</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-style: normal;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-style: italic;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h2 id="字体系列-font-family"><a href="#字体系列-font-family" class="headerlink" title="字体系列 font-family"></a>字体系列 font-family</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 优先使用：微软雅黑 &gt; 黑体 */</span><br><span class="hljs-attribute">font-family</span>: 微软雅黑, 黑体, sans-serif;<br></code></pre></td></tr></table></figure><table><thead><tr><th>操作系统</th><th>默认字体</th></tr></thead><tbody><tr><td>windows</td><td>微软雅黑</td></tr><tr><td>Mac</td><td>PingFang SC</td></tr></tbody></table><p>常见字体系列</p><table><thead><tr><th>常见字体系列</th><th>特点</th><th>场景</th><th>该系列常见字体</th></tr></thead><tbody><tr><td>无衬线字体（sans-serif）</td><td>文字笔画粗细均匀，并且首尾无装饰</td><td>网页</td><td>黑体、Arial</td></tr><tr><td>衬线字体（serif）</td><td>文字笔画粗细不均匀，并且首尾有装饰</td><td>报刊书籍</td><td>宋体、Times New Roman</td></tr><tr><td>等宽字体（monospace）</td><td>每个字母或文字的宽度相等</td><td>程序代码编写</td><td>Consolas</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-family: 微软雅黑, 黑体, sans-serif;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-family: 宋体, Times New Roman, serif;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-family: Consolas, fira Code, monospace;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="文本缩进-text-indent"><a href="#文本缩进-text-indent" class="headerlink" title="文本缩进 text-indent"></a>文本缩进 text-indent</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 首行缩进2个字符 */</span><br><span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;<br></code></pre></td></tr></table></figure><p>取值</p><ul><li>数字 + px</li><li>数字 + em(推荐：1em=当前标签的 font-size 大小)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-indent: 2em;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="文本对齐-text-align"><a href="#文本对齐-text-align" class="headerlink" title="文本对齐 text-align"></a>文本对齐 text-align</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-align</span>: center;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认）</td></tr><tr><td>center</td><td>居中对齐</td></tr><tr><td>right</td><td>右对齐</td></tr></tbody></table><p>可居中的标签</p><ul><li>文本</li><li>span a</li><li>input img</li></ul><p>内容居中需要给<code>父元素</code>设置居中属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="文本修饰-text-decoration"><a href="#文本修饰-text-decoration" class="headerlink" title="文本修饰 text-decoration"></a>文本修饰 text-decoration</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 常用于清除a标签默认下划线 */</span><br><span class="hljs-attribute">text-decoration</span>: none;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>underline</td><td>下划线</td></tr><tr><td>line-through</td><td>删除线</td></tr><tr><td>overline</td><td>上划线</td></tr><tr><td>none</td><td>无</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-decoration: none;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-decoration: underline;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-decoration: line-through;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-decoration: overline;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="行间距-line-height"><a href="#行间距-line-height" class="headerlink" title="行间距 line-height"></a>行间距 line-height</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5</span>;<br></code></pre></td></tr></table></figure><p>取值</p><ul><li>数字 + px</li><li>倍数（当前标签 font-size 的倍数）</li></ul><p>文本高度</p><ul><li>上间距</li><li>文本高度</li><li>下间距</li></ul><p>应用：</p><ul><li>单行文本垂直居中：line-height=元素父元素高度</li><li>取消上下间距：line-height=1</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;line-height: 1&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;line-height: 1.5;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;line-height: 3;&quot;</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="font-属性简写"><a href="#font-属性简写" class="headerlink" title="font 属性简写"></a>font 属性简写</h2><p>层叠性：后面的样式覆盖前面的样式</p><p>复合属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>       <span class="hljs-comment">/* 想要div文字变倾斜 加粗 字号设置为16像素 并且 是微软雅黑 */</span><br>       <span class="hljs-selector-tag">div</span> &#123;<br>           <span class="hljs-comment">/* font-style: italic;</span><br><span class="hljs-comment">           font-weight: 700;</span><br><span class="hljs-comment">           font-size: 16px;</span><br><span class="hljs-comment">           font-family: &#x27;Microsoft yahei&#x27;; */</span><br>           <span class="hljs-comment">/* 复合属性: 简写的方式  节约代码 */</span><br>           <span class="hljs-comment">/* font: font-style  font-weight  font-size/line-height  font-family; */</span><br>           <span class="hljs-comment">/* font: italic 700 16px &#x27;Microsoft yahei&#x27;; */</span><br>           <span class="hljs-attribute">font</span>: <span class="hljs-number">20px</span> <span class="hljs-string">&#x27;黑体&#x27;</span>;<br>           <span class="hljs-comment">/*如果不需要可以省略   但是 font-size 和  font-style必须有 */</span><br>       &#125;<br>    &lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS 层叠样式表</title>
    <link href="/2022/04/03/3.CSS%20%E6%A0%B7%E5%BC%8F%E5%B1%82%E5%8F%A0%E8%A1%A8/"/>
    <url>/2022/04/03/3.CSS%20%E6%A0%B7%E5%BC%8F%E5%B1%82%E5%8F%A0%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS-层叠样式表"><a href="#CSS-层叠样式表" class="headerlink" title="CSS 层叠样式表"></a>CSS 层叠样式表</h1><p>Cascading style sheets</p><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs css">选择器 &#123;<br>    属性名: 属性值<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="书写位置"><a href="#书写位置" class="headerlink" title="书写位置"></a>书写位置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 这里写css */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="CSS-引入方式"><a href="#CSS-引入方式" class="headerlink" title="CSS 引入方式"></a>CSS 引入方式</h2><table><thead><tr><th>引入方式</th><th>书写位置</th><th>作用范围</th><th>使用场景</th></tr></thead><tbody><tr><td>内嵌式</td><td>style 标签</td><td>当前页面</td><td>小案例</td></tr><tr><td>外链式</td><td>link 标签引入单独 css 文件</td><td>多个页面</td><td>项目中</td></tr><tr><td>行内式</td><td>标签 style 属性中</td><td>当前标签</td><td>配合 js 使用</td></tr></tbody></table><h3 id="（1）内嵌式"><a href="#（1）内嵌式" class="headerlink" title="（1）内嵌式"></a>（1）内嵌式</h3><ul><li>CSS 写在 style 标签中</li><li>style 标签可以写在页面任意位置，一般放在 head 标签中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span>  <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* 文字颜色设置为红色 */</span></span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">            <span class="hljs-comment">/* 字体大小设置为30像素 */</span></span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 背景颜色 */</span></span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: green;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置宽度和高度 */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一段设置了css样式的文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="（2）外链式"><a href="#（2）外链式" class="headerlink" title="（2）外链式"></a>（2）外链式</h3><ul><li>CSS 写在单独的<code>.css</code>文件中</li><li>通过 link 标签引入到网页中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* css-2.css */</span><br><br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br>Copy <span class="hljs-selector-tag">to</span> clipboardErrorCopied<br>&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;<br>&lt;<span class="hljs-selector-tag">html</span> lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;link rel=&quot;stylesheet&quot;<br>          href=&quot;./css-<span class="hljs-number">2</span><span class="hljs-selector-class">.css</span>&quot;&gt;<br>&lt;/head&gt;<br><br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;这是一段设置了css样式的文字&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br><br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="（3）行内式"><a href="#（3）行内式" class="headerlink" title="（3）行内式"></a>（3）行内式</h3><ul><li>CSS 写在标签 style 属性中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: green; background-color: #f1f1f1;&quot;</span>&gt;</span><br>  这是一段设置了css样式的文字<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><ul><li>标签选择器</li><li>类选择器</li><li>id 选择器</li><li>通配符选择器</li></ul><h3 id="（1）标签选择器"><a href="#（1）标签选择器" class="headerlink" title="（1）标签选择器"></a>（1）标签选择器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">标签名 &#123;<br>    属性名：属性值;<br>&#125;Copy to clipboardErrorCopied<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你好，世界<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="（2）类选择器"><a href="#（2）类选择器" class="headerlink" title="（2）类选择器"></a>（2）类选择器</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">.类名&#123;<br>    属性名：属性值<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>合法的类名：数字、字母、下划线、中划线</li><li>一个元素可以有多个类名，空格隔开</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.red</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.size</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>你好，世界<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red size&quot;</span>&gt;</span>你好，世界<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="（3）id-选择器"><a href="#（3）id-选择器" class="headerlink" title="（3）id 选择器"></a>（3）id 选择器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">元素<span class="hljs-built_in">id</span>&#123;</span><br>    属性名：属性值;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>页面中唯一，不能重复</li><li>一个标签只能有一个 id</li><li>id 选择器一般与 js 配合使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#name</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>你好，世界<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="（4）通配符选择器"><a href="#（4）通配符选择器" class="headerlink" title="（4）通配符选择器"></a>（4）通配符选择器</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">*&#123;<br>   属性名：属性值<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>选中页面所有标签</li><li>一般用于统一设置页面样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 清除内外边距 */</span><br>* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML 标签元素</title>
    <link href="/2022/04/03/2.HTML%20%E6%A0%87%E7%AD%BE%E5%85%83%E7%B4%A0/"/>
    <url>/2022/04/03/2.HTML%20%E6%A0%87%E7%AD%BE%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML-标签元素"><a href="#HTML-标签元素" class="headerlink" title="HTML 标签元素"></a>HTML 标签元素</h1><h2 id="1、标题标签-Heading"><a href="#1、标题标签-Heading" class="headerlink" title="1、标题标签 Heading"></a>1、标题标签 Heading</h2><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>~<span class="hljs-selector-tag">h6</span><br>&lt;<span class="hljs-selector-tag">h1</span>&gt;一级标题&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;<span class="hljs-selector-tag">h2</span>&gt;二级标题&lt;/<span class="hljs-selector-tag">h2</span>&gt;<br>&lt;<span class="hljs-selector-tag">h3</span>&gt;三级标题&lt;/<span class="hljs-selector-tag">h3</span>&gt;<br>&lt;<span class="hljs-selector-tag">h4</span>&gt;四级标题&lt;/<span class="hljs-selector-tag">h4</span>&gt;<br>&lt;<span class="hljs-selector-tag">h5</span>&gt;五级标题&lt;/<span class="hljs-selector-tag">h5</span>&gt;<br>&lt;<span class="hljs-selector-tag">h6</span>&gt;六级标题&lt;/<span class="hljs-selector-tag">h6</span>&gt;<br></code></pre></td></tr></table></figure><p>同时选中下一个相同字符：<code>ctrl + D</code></p><p>特点：</p><ul><li>独占一行</li><li>文字加粗</li><li>文字变大，h1-&gt;h6 文字逐渐变小</li></ul><h2 id="2、段落标签-Paragraph"><a href="#2、段落标签-Paragraph" class="headerlink" title="2、段落标签 Paragraph"></a>2、段落标签 Paragraph</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>内容</p><p>特点：</p><ul><li>段落之间存在间隙</li><li>独占一行</li></ul><h2 id="3、排版标签"><a href="#3、排版标签" class="headerlink" title="3、排版标签"></a>3、排版标签</h2><p>（1）换行符 Line Break</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">第一行文本<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>第二行文本<br></code></pre></td></tr></table></figure><p>第一行文本<br>第二行文本</p><p>特点</p><ul><li>单标签</li><li>让文字强制换行</li></ul><p>（1）水平分割线 Horizontal Rule</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4、文本格式化标签"><a href="#4、文本格式化标签" class="headerlink" title="4、文本格式化标签"></a>4、文本格式化标签</h2><p>推荐使用后者</p><ul><li>b/strong 加粗</li><li>u/ins 下划线</li><li>i/em 倾斜</li><li>s/del 删除线</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>加粗<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>加粗<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>下划线<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>下划线<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>倾斜<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>倾斜<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>删除线<span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>删除线<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>加粗</strong> <strong>加粗</strong></p><p>下划线 下划线</p><p><em>倾斜</em> <em>倾斜</em></p><p>删除线 <del>删除线</del></p><h2 id="5、媒体标签"><a href="#5、媒体标签" class="headerlink" title="5、媒体标签"></a>5、媒体标签</h2><p>（1）图片标签 Image</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图片地址&quot;</span>  //<span class="hljs-attr">source</span></span><br><span class="hljs-tag">  <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;替换文本&quot;</span>  //<span class="hljs-attr">alternative</span></span><br><span class="hljs-tag">  <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;提示文本&quot;</span>  </span><br><span class="hljs-tag">  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;宽度&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;高度&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><p>标签属性：属性名=属性值</p><h2 id="6、资源路径"><a href="#6、资源路径" class="headerlink" title="6、资源路径"></a>6、资源路径</h2><p>（1）当前路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.png&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 推荐使用./ --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./image.png&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>（2）下级路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/image.png&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>（3）上级路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../image.png&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7、音频标签"><a href="#7、音频标签" class="headerlink" title="7、音频标签"></a>7、音频标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span></span><br><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;音频地址&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">controls</span> 显示播放控件</span><br><span class="hljs-tag">  <span class="hljs-attr">autoplay</span> 自动播放（部分浏览器不支持）</span><br><span class="hljs-tag">  <span class="hljs-attr">loop</span> 循环播放</span><br><span class="hljs-tag">&lt;/<span class="hljs-attr">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><p>支持的格式 mp3 wav</p><h2 id="8、视频标签"><a href="#8、视频标签" class="headerlink" title="8、视频标签"></a>8、视频标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;视频地址&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">controls</span> 显示播放控件</span><br><span class="hljs-tag">  <span class="hljs-attr">autoplay</span> 自动播放（谷歌浏览器需要配合<span class="hljs-attr">muted</span>静音播放）</span><br><span class="hljs-tag">  <span class="hljs-attr">muted</span> 静音播放</span><br><span class="hljs-tag">  <span class="hljs-attr">loop</span> 循环播放</span><br><span class="hljs-tag">&lt;/<span class="hljs-attr">video</span>&gt;</span><br></code></pre></td></tr></table></figure><p>支持的格式 mp4</p><h2 id="9、链接标签-Anchor"><a href="#9、链接标签-Anchor" class="headerlink" title="9、链接标签 Anchor"></a>9、链接标签 Anchor</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;目标地址&quot;</span>&gt;</span>文字内容<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- eg: --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">百度</a></p><p>属性： </p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">target: <span class="hljs-variable">_self</span> 当前窗口打开（默认） / <span class="hljs-variable">_blank</span> 新窗口打开<br></code></pre></td></tr></table></figure><p>Tips: chrome 地址栏双击可以看到完整地址</p><p>网站的默认首页 index.html</p><h2 id="10、列表"><a href="#10、列表" class="headerlink" title="10、列表"></a>10、列表</h2><ul><li>有序列表</li><li>自定义列表</li></ul><p>（1）无序列表 Unordered List</p><p>列表项 List Item</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>桃子<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）有序列表 Ordered List</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>桃子<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）自定义列表 Definition List</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>水果<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>桃子<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标签含义</p><ul><li>dl是definition lists的英文缩写 (自定义列表)</li><li>dt是definition term的缩写 (自定义列表组)</li><li>dd是definition description的缩写（自定义列表描述）</li></ul><h2 id="11、表格"><a href="#11、表格" class="headerlink" title="11、表格"></a>11、表格</h2><p>（1）基本元素</p><p>标签含义</p><ul><li>tr Table Row</li><li>th Table Header</li><li>td Table Data</li></ul><p>table 属性：</p><ul><li>border 边框宽度</li><li>width 表格宽度</li><li>height 表格高度</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span><br>        表格大标题<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jack<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/table-1.html" height="150" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>（2）表格结构，可以省略</p><ul><li>thead 表格头部</li><li>tbody 表格主体</li><li>tfoot 表格底部</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span><br>        表格大标题<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jack<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>求和<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>57<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/table-2.html" height="170" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><p>（3）合并单元格</p><ul><li>跨行合并（垂直）rowspan</li><li>跨列合并（水平）colspan</li></ul><p>左上原则</p><ul><li>上下合并，保留最上</li><li>左右合并，保留最左</li></ul><blockquote><p>Tips: 不能跨结构合并</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span><br>        表格大标题<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jack<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>求和: 57<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/table-3.html" height="170" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; font-size: 15px; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px; color: rgb(52, 73, 94); font-family: &quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h2 id="12、表单"><a href="#12、表单" class="headerlink" title="12、表单"></a>12、表单</h2><h3 id="输入框-input"><a href="#输入框-input" class="headerlink" title="输入框 input"></a>输入框 input</h3><table><thead><tr><th>type 属性</th><th>输入框类型</th></tr></thead><tbody><tr><td>text</td><td>文本框</td></tr><tr><td>password</td><td>密码框</td></tr><tr><td>radio</td><td>单选框</td></tr><tr><td>checkbox</td><td>多选框</td></tr><tr><td>file</td><td>文件选择</td></tr><tr><td>submit</td><td>提交按钮</td></tr><tr><td>reset</td><td>重置按钮</td></tr><tr><td>button</td><td>普通按钮</td></tr></tbody></table><p>（1）text 文本框</p><p>placeholder 占位符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;文本框占位符&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>（2）password 密码框</p><p>placeholder 占位符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码框占位符&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>（3）radio 单选框</p><p>name 属性分组，一个分组只能有一个值被选中</p><p>checked 默认选中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span>男<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">checked</span> /&gt;</span>女<br></code></pre></td></tr></table></figure><p>（4）checkbox 多选框</p><p>checked 默认选中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span> /&gt;</span>北京<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shanghai&quot;</span> <span class="hljs-attr">checked</span> /&gt;</span>上海<br></code></pre></td></tr></table></figure><p>（5）file 文件选择</p><p>multiple 多选(按住 ctrl 多选)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>（6）按钮</p><ul><li>submit 提交按钮</li><li>reset 重置按钮</li><li>button 普通按钮</li></ul><p>需要配合 form 表单域使用</p><p>属性 value 修改按钮显示的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;普通按钮&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="button-按钮标签"><a href="#button-按钮标签" class="headerlink" title="button 按钮标签"></a>button 按钮标签</h3><p>type 取值</p><ul><li>submit 提交按钮</li><li>reset 重置按钮</li><li>button 普通按钮(默认)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span>重置按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>普通按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>普通按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>提交按钮 重置按钮 普通按钮 普通按钮</p><h3 id="select-下拉菜单"><a href="#select-下拉菜单" class="headerlink" title="select 下拉菜单"></a>select 下拉菜单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>默认选中第一项，可以指定默认选中 selected</p><h3 id="textarea-多行文本域"><a href="#textarea-多行文本域" class="headerlink" title="textarea 多行文本域"></a>textarea 多行文本域</h3><p>属性</p><ul><li>cols 宽度 列数</li><li>rows 高度 行数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h3><p>点击文字也可选中选项</p><p>两种使用方式等效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;man&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;man&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> /&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 男 女</p><h3 id="无语义标签"><a href="#无语义标签" class="headerlink" title="无语义标签"></a>无语义标签</h3><ul><li>div 块级标签，独占一行</li><li>span 行内标签</li></ul><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p>手机端常用</p><ul><li>header 网页头部</li><li>nav 网页导航</li><li>footer 网页底部</li><li>aside 网页侧边栏</li><li>section 网页区块</li><li>article 网页文章</li></ul><p>以上标签和 div 等效，多了语义化</p><h3 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h3><p>在网页中显示特殊字符</p><ul><li>空格 <code> </code> </li><li>版权符 <code>©</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 单词之间有5个空格，最后只显示一个空格 --&gt;</span><br>hello world<br><br><span class="hljs-comment">&lt;!-- 实现单词之间有5个空格 --&gt;</span><br>hello<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>world<br><br><span class="hljs-comment">&lt;!-- 版权符号 --&gt;</span><br><span class="hljs-symbol">&amp;copy;</span><br></code></pre></td></tr></table></figure><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Form Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>姓名:<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>性别:<br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">checked</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>爱好:<br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>&gt;</span>足球<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>羽毛球<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>现居：<span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>个人简介：<br>            <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;60&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><iframe src="https://mouday.github.io/coding-tree/blog/front-end-learn/demo/form-1.html" height="470" style="-webkit-font-smoothing: antialiased; -webkit-tap-highlight-color: transparent; text-size-adjust: none; box-sizing: border-box; border: 1px solid rgb(238, 238, 238); width: 1px; min-width: 100%; margin: 1em 0px;"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“赞美苦难”</title>
    <link href="/2022/03/07/%E6%91%98%E5%BD%95/"/>
    <url>/2022/03/07/%E6%91%98%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>一位近八十的老妇每天背煤气罐赚钱给六十岁瘫痪在床的儿子买药，</p><p>一个无钱医治病痛的男人在家给自己做截肢手术，</p><p>一位母亲一天做三份工维持着绝症女儿的生命，</p><p>………</p><p>太多了，这样的事例太多了。</p><p>每当看到这样的新闻，我脑子里就会浮现出这样的画面：奴隶主指着远处奄奄一息的一个奴隶对身处跪着的奴隶大声呵斥“你看看它，快饿死了都没说一个字的怨言，而你仅仅是三天没吃饭就嚷嚷没力气干活，你凭什么抱怨？”</p><p>所有对苦难的美化，深层次原因都是刻意模糊民众对权利和义务的认知，从而达到愚弄压榨和奴役的目的。</p><p>人类文明的进程，是伴随者人们意识到人不仅仅是作为一种动物生物性存在，也是具有整体意识的社会性存在这种意识的觉醒而进步。在这个文明社会里，老人不会因为年老体衰被排挤抛弃，孩童不会因为稚嫩无力被压榨，病患不会因为贫穷被丢弃街头无人问津，女人不会因为身体属性被歧视侮辱，每个人都有自己独立的人格，每个人都有自己的尊严，每个人都有权利不被凌辱欺压，这种权利与生俱来，这就是人类到目前为止最为闪耀的顶尖思想结晶：天赋人权。</p><p>但是没有哪个国家或者民族敢于宣称自己已经做到了尽善尽美，因为各自的历史和民族个性不同，都有各自的问题，但他们都在很认真的思考，执行着对人类文明永不停息的探索。</p><p>有生皆苦，但不是有生必苦，诸多人类的苦难随着社会的进步都被消亡。人们摆脱不了病痛的侵扰，但可以解除病痛的折磨。摆脱不了意外对生命的冲击，但可以进行及时的补救。摆脱不了贫穷的折磨，但可以有最基本保障的生存。这一切的背后，就是整个社会共同的认知，以及执行部门应尽的义务。</p><p>赞美苦难，让苦难者安于被折磨，让旁观者甘心被剥削压迫，让整体大众陷入莫管他人瓦上霜的麻木，然后任由权贵肆意妄为，鱼肉人间。</p><p>这是何等的邪恶与卑污。</p><p>有时候我很诧异并愤怒身边那么多麻木自私的人群，直到有一天我看见一句话：这片土地上的人们为什么如此自私且愚昧，是因为他们背负了太多的义务和责任，却没有半点权利。</p><p>那一刻我百感交集。</p><p>………</p><p>对一个人的欺凌，就是对所有人的蔑视。</p><p>每个人都不是孤立存在的，一个人的苦难，就是所有人的苦难。不要问丧钟为谁而鸣，丧钟就是为你而鸣。</p><p>……………海明威</p>]]></content>
    
    
    
    <tags>
      
      <tag>摘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stl</title>
    <link href="/2022/02/28/stl/"/>
    <url>/2022/02/28/stl/</url>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><h1 id="字符串string"><a href="#字符串string" class="headerlink" title="字符串string"></a>字符串string</h1><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造函数</span><br>string s1;<br><span class="hljs-function">string <span class="hljs-title">s2</span><span class="hljs-params">(s1)</span></span>;<br><span class="hljs-function">string <span class="hljs-title">s3</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;a&#x27;</span>)</span></span>;<br><span class="hljs-comment">//赋值操作</span><br>s1=<span class="hljs-string">&#x27;a&#x27;</span>;<br>s1=<span class="hljs-string">&quot;abcd&quot;</span>;<br>s2=s1;<br>s2=s1.<span class="hljs-built_in">assign</span>(s1);<br>s3=s2.<span class="hljs-built_in">assign</span>(s1,<span class="hljs-number">5</span>);<span class="hljs-comment">//前五个</span><br>s3.<span class="hljs-built_in">assign</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;x&#x27;</span>);<br><span class="hljs-comment">//字符串拼接</span><br>s2+=s1;<br>s3.<span class="hljs-built_in">append</span>(s2);<br>s3.<span class="hljs-built_in">append</span>(s2,<span class="hljs-number">6</span>);<span class="hljs-comment">//前六个</span><br>s3.<span class="hljs-built_in">append</span>(s1,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//从下表1开始3个字符</span><br><span class="hljs-comment">//字符串比较</span><br><span class="hljs-type">bool</span> cmp=s1.<span class="hljs-built_in">compare</span>(s2);<span class="hljs-comment">//大于零  等于零  小于零</span><br><span class="hljs-comment">//字符存取</span><br>cout&lt;&lt;s1[<span class="hljs-number">1</span>];<span class="hljs-comment">//输出第二个字符</span><br>cout&lt;&lt;s1.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>);<br><span class="hljs-comment">//字符串插入和删除</span><br>s1.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;666&quot;</span>);<br>s1.<span class="hljs-built_in">erase</span>(<span class="hljs-number">6</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//删除从第六个位置开始的3个字符</span><br><span class="hljs-comment">//字符串的字串</span><br>string s = <span class="hljs-string">&quot;hello@sina.com&quot;</span>;<br><span class="hljs-type">int</span> n = s.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;@&quot;</span>),pos=<span class="hljs-number">0</span>;<br>string username = s.<span class="hljs-built_in">substr</span>(pos, n);<span class="hljs-comment">//返回由pos开始的n个字符的字符串</span><br><br></code></pre></td></tr></table></figure><h1 id="动态数组vector"><a href="#动态数组vector" class="headerlink" title="动态数组vector"></a>动态数组vector</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造函数</span><br>vector&lt;<span class="hljs-type">int</span>&gt;v;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">v1</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">v2</span>(v1);<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">v3</span>(<span class="hljs-number">100</span>);<span class="hljs-comment">//默认赋值为0</span><br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">v4</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//赋值操作</span><br>v = v1;<br>v.<span class="hljs-built_in">assign</span>(v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>());<br><br><span class="hljs-comment">//容量和大小</span><br><span class="hljs-keyword">if</span> (v4.<span class="hljs-built_in">empty</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;v4为空&quot;</span> &lt;&lt; endl;<br>&#125; <br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;v4不为空&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;v4的容量 = &quot;</span> &lt;&lt; v1.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;v4的大小 = &quot;</span> &lt;&lt; v1.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br>v1.<span class="hljs-built_in">resize</span>(<span class="hljs-number">15</span>,<span class="hljs-number">10</span>);<span class="hljs-comment">//若指定的更大，默认用0填充新位置</span><br>v1.<span class="hljs-built_in">resize</span>(<span class="hljs-number">5</span>);<span class="hljs-comment">//若指定的更小，超出部分元素被删除</span><br><br><span class="hljs-comment">//插入和删除</span><br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">666</span>);<br>v.<span class="hljs-built_in">pop_back</span>();<br>v.<span class="hljs-built_in">insert</span>(v.<span class="hljs-built_in">begin</span>(),<span class="hljs-number">888</span>);<br>v.<span class="hljs-built_in">insert</span>(v.<span class="hljs-built_in">begin</span>(),<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>());<br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>());<br>v.<span class="hljs-built_in">clear</span>();<br><br><span class="hljs-comment">//数据存取</span><br>cout&lt;&lt;v.<span class="hljs-built_in">front</span>()&lt;&lt;v.<span class="hljs-built_in">back</span>()&lt;&lt;v[<span class="hljs-number">1</span>]&lt;&lt;v.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>)&lt;&lt;endl;<br><br><span class="hljs-comment">//互换容器</span><br>v1.<span class="hljs-built_in">swap</span>(v2);<span class="hljs-comment">//将v1与v2的元素互换</span><br><br></code></pre></td></tr></table></figure><h1 id="链表list"><a href="#链表list" class="headerlink" title="链表list"></a>链表list</h1><p>l优点：采用动态存储分配，不会造成内存浪费和溢出，执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</p><p>缺点：链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</p><p>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">//构造与赋值</span><br>list&lt;<span class="hljs-type">int</span>&gt;L1;<br>list&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">L2</span>(L1.<span class="hljs-built_in">begin</span>(),L1.<span class="hljs-built_in">end</span>());<br>list&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">L3</span>(L2);<br>list&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">L4</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1000</span>);<br><br>L2 = L1;<br>L3.<span class="hljs-built_in">assign</span>(L2.<span class="hljs-built_in">begin</span>(), L2.<span class="hljs-built_in">end</span>());<br>L4.<span class="hljs-built_in">assign</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br>L1.<span class="hljs-built_in">swap</span>(L2);<br><br><span class="hljs-comment">//容量和大小</span><br><span class="hljs-keyword">if</span> (L1.<span class="hljs-built_in">empty</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;L1为空&quot;</span> &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;L1不为空&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;L1的大小为： &quot;</span> &lt;&lt; L1.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br><br>L1.<span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>);<br>L1.<span class="hljs-built_in">resize</span>(<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//插入和删除</span><br>list&lt;<span class="hljs-type">int</span>&gt; L;<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>L.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">100</span>);<br><br>L.<span class="hljs-built_in">pop_back</span>();<br>L.<span class="hljs-built_in">pop_front</span>();<br><br>list&lt;<span class="hljs-type">int</span>&gt;::iterator it = L.<span class="hljs-built_in">begin</span>();<br>L.<span class="hljs-built_in">insert</span>(++it, <span class="hljs-number">1000</span>);<br>L.<span class="hljs-built_in">erase</span>(it);<br><br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10000</span>);<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10000</span>);<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10000</span>);<br>L.<span class="hljs-built_in">remove</span>(<span class="hljs-number">10000</span>);<span class="hljs-comment">///删除容器中所有与elem值匹配的元素</span><br><br>L.<span class="hljs-built_in">clear</span>();<br><br><span class="hljs-comment">//数据存取</span><br>cout &lt;&lt; <span class="hljs-string">&quot;第一个元素为： &quot;</span> &lt;&lt; L1.<span class="hljs-built_in">front</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;最后一个元素为： &quot;</span> &lt;&lt; L1.<span class="hljs-built_in">back</span>() &lt;&lt; endl;<br><br><span class="hljs-comment">//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据</span><br><br><span class="hljs-comment">//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据</span><br><br><span class="hljs-comment">//list容器的迭代器是双向迭代器，不支持随机访问</span><br><br>list&lt;<span class="hljs-type">int</span>&gt;::iterator it = L1.<span class="hljs-built_in">begin</span>();<br><span class="hljs-comment">//it = it + 1;//错误，不可以跳跃访问，即使是+1</span><br><br><span class="hljs-comment">//反转和排序</span><br><br>L.<span class="hljs-built_in">reverse</span>();<br>L.<span class="hljs-built_in">sort</span>(); <span class="hljs-comment">//默认的排序规则 从小到大</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)</span> </span>&#123;<span class="hljs-keyword">return</span> v1 &gt; v2;&#125;<br>L.<span class="hljs-built_in">sort</span>(myCompare); <span class="hljs-comment">//指定规则，从大到小</span><br></code></pre></td></tr></table></figure><h1 id="队列queue"><a href="#队列queue" class="headerlink" title="队列queue"></a>队列queue</h1><ul><li>入队   — push</li><li>出队   — pop</li><li>返回队头元素   — front</li><li>返回队尾元素   — back</li><li>判断队是否为空   — empty</li><li>返回队列大小   — size</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造函数</span><br>queue&lt;Person&gt; q;<br><span class="hljs-function">queue&lt;Person&gt; <span class="hljs-title">p</span><span class="hljs-params">(q)</span></span>;<br><span class="hljs-comment">//数据存取  大小操作</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">1000</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">900</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;沙僧&quot;</span>, <span class="hljs-number">800</span>)</span></span>;<br><br>q.<span class="hljs-built_in">push</span>(p1);<br>q.<span class="hljs-built_in">push</span>(p2);<br>q.<span class="hljs-built_in">push</span>(p3);<br>q.<span class="hljs-built_in">push</span>(p4);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;队列大小为：&quot;</span> &lt;&lt; q.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<span class="hljs-comment">//队列不提供迭代器，更不支持随机访问</span><br><span class="hljs-comment">//输出队头元素</span><br>cout &lt;&lt; <span class="hljs-string">&quot;队头元素-- 姓名： &quot;</span> &lt;&lt; q.<span class="hljs-built_in">front</span>().m_Name <br>             &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span>&lt;&lt; q.<span class="hljs-built_in">front</span>().m_Age &lt;&lt; endl;<br>             <br>cout &lt;&lt; <span class="hljs-string">&quot;队尾元素-- 姓名： &quot;</span> &lt;&lt; q.<span class="hljs-built_in">back</span>().m_Name  <br>             &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; q.<span class="hljs-built_in">back</span>().m_Age &lt;&lt; endl;<br><br>cout &lt;&lt; endl;<br>q.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//弹出队头元素</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="栈stack"><a href="#栈stack" class="headerlink" title="栈stack"></a>栈stack</h1><ul><li>入栈   — push</li><li>出栈   — pop</li><li>返回栈顶   — top</li><li>判断栈是否为空   — empty</li><li>返回栈大小   — size</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造函数</span><br>stack&lt;<span class="hljs-type">int</span>&gt; st;<br><span class="hljs-function">stack&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">st1</span><span class="hljs-params">(st)</span></span>;<br><br><span class="hljs-comment">//数据存取//大小操作</span><br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;栈的大小为：&quot;</span> &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br><span class="hljs-keyword">while</span> (!s.<span class="hljs-built_in">empty</span>()) &#123;<br><span class="hljs-comment">//输出栈顶元素</span><br>cout &lt;&lt; <span class="hljs-string">&quot;栈顶元素为： &quot;</span> &lt;&lt; s.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br><span class="hljs-comment">//弹出栈顶元素</span><br>s.<span class="hljs-built_in">pop</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="集合set-multiset"><a href="#集合set-multiset" class="headerlink" title="集合set/multiset"></a>集合set/multiset</h1><p>所有元素都会在插入时自动被排序</p><p><strong>区别：</strong></p><ul><li>set不可以插入重复数据，而multiset可以</li><li>set插入数据的同时会返回插入结果，表示插入是否成功</li><li>multiset不会检测数据，因此可以插入重复数据</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造和赋值</span><br>set&lt;<span class="hljs-type">int</span>&gt;st, st1;<br>set&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">st2</span>(st);<br>st1 = st2;<br><br><span class="hljs-comment">//插入和删除</span><br>st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">5</span>);<br>st.<span class="hljs-built_in">itsert</span>(<span class="hljs-number">0</span>);<br>st.<span class="hljs-built_in">erase</span>(st.<span class="hljs-built_in">begin</span>());<br>st.<span class="hljs-built_in">erase</span>(st.<span class="hljs-built_in">begin</span>(), st.<span class="hljs-built_in">end</span>());<br>st.<span class="hljs-built_in">erase</span>(<span class="hljs-number">0</span>);<br>st.<span class="hljs-built_in">clear</span>();<br><br><span class="hljs-comment">//大小和交换</span><br><span class="hljs-keyword">if</span> (!st.<span class="hljs-built_in">empty</span>())<br>cout &lt;&lt; st.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>st.<span class="hljs-built_in">swap</span>(st1);<br><br><span class="hljs-comment">//查找和统计</span><br>set&lt;<span class="hljs-type">int</span>&gt;::iterator pos = s1.<span class="hljs-built_in">find</span>(<span class="hljs-number">30</span>);<br><span class="hljs-comment">//存在返回该键的元素的迭代器；不存在返回set.end();</span><br><span class="hljs-keyword">if</span> (pos != s1.<span class="hljs-built_in">end</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到了元素 ： &quot;</span> &lt;&lt; *pos &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;未找到元素&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-type">int</span> num = s1.<span class="hljs-built_in">count</span>(<span class="hljs-number">30</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;出现次数 = &quot;</span> &lt;&lt; num &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h1 id="映射map-multimap"><a href="#映射map-multimap" class="headerlink" title="映射map/multimap"></a>映射map/multimap</h1><p>​    对组pair</p><ul><li><p>成对出现的数据，利用对组可以返回两个数据</p></li><li><p><code>pair&lt;type, type&gt; p ( value1, value2 );</code></p></li><li><p><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//对组创建</span><br><span class="hljs-function">pair&lt;string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(string(<span class="hljs-string">&quot;Tom&quot;</span>), <span class="hljs-number">20</span>)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt;  p.first &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p.second &lt;&lt; endl;<br><br>pair&lt;string, <span class="hljs-type">int</span>&gt; p2 = <span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">10</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p2.first &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p2.second &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure><ul><li><p>map中所有元素都是pair</p></li><li><p>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</p></li><li><p>所有元素都会根据元素的键值自动排序</p></li><li><p>可以根据key值快速找到value值</p></li><li><p><strong>map中所有元素都是成对出现，插入数据时候要使用对组</strong></p></li></ul><p><strong>区别：</strong></p><p>map不允许容器中有重复key值元素；multimap允许容器中有重复key值元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造和赋值</span><br>map&lt;string, <span class="hljs-type">int</span>&gt;mp;<br><br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">10</span>));<br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-number">20</span>));<br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;小刚&quot;</span>, <span class="hljs-number">30</span>));<br><br>map&lt;string, <span class="hljs-type">int</span>&gt;<span class="hljs-built_in">mp1</span>(mp);<br><br>map&lt;string, <span class="hljs-type">int</span>&gt;mp2;<br>mp2 = mp1;<br><br><span class="hljs-comment">//大小和交换</span><br><span class="hljs-keyword">if</span> (mp.<span class="hljs-built_in">empty</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;m为空&quot;</span> &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;m不为空&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;m的大小为： &quot;</span> &lt;&lt; m.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br>mp.<span class="hljs-built_in">swap</span>(mp1);<br><br><span class="hljs-comment">//插入和删除</span><br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;小芳&quot;</span>, <span class="hljs-number">40</span>));<br>mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;小光&quot;</span>, <span class="hljs-number">50</span>));<br>mp[<span class="hljs-string">&quot;小花&quot;</span>] = <span class="hljs-number">60</span>;<br><br>m.<span class="hljs-built_in">erase</span>(m.<span class="hljs-built_in">begin</span>());<br>m.<span class="hljs-built_in">erase</span>(<span class="hljs-number">10</span>);<br><br>m.<span class="hljs-built_in">erase</span>(m.<span class="hljs-built_in">begin</span>(), m.<span class="hljs-built_in">end</span>());<br>m.<span class="hljs-built_in">clear</span>();<br><br><span class="hljs-comment">//查找和统计</span><br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::iterator pos = mp.<span class="hljs-built_in">find</span>(<span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">if</span> (pos != mp.<span class="hljs-built_in">end</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到了元素 key = &quot;</span> &lt;&lt; (*pos).first <br>&lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; (*pos).second &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;未找到元素&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-type">int</span> num = mp.<span class="hljs-built_in">count</span>(<span class="hljs-number">30</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure><h1 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h1><h2 id="1-遍历"><a href="#1-遍历" class="headerlink" title="1.遍历"></a>1.遍历</h2><h3 id="for-each"><a href="#for-each" class="headerlink" title="for_each"></a>for_each</h3><p>实现遍历容器</p><p><code>for_each(iterator beg, iterator end, _func);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print01</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">print02</span> &#123;<br> <span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//for_each算法基本用法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-comment">//遍历算法</span><br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), print01);<br>cout &lt;&lt; endl;<br>    <br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">print02</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><h2 id="2-查找"><a href="#2-查找" class="headerlink" title="2.查找"></a>2.查找</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>利用find可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p><p><code>find(iterator beg, iterator end, value);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//查找容器中是否有 5 这个元素</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = <span class="hljs-built_in">find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h3 id="find-if"><a href="#find-if" class="headerlink" title="find_if"></a>find_if</h3><p>find_if按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p><code>find_if(iterator beg, iterator end, _Pred);  </code></p><h3 id="adjacent-find"><a href="#adjacent-find" class="headerlink" title="adjacent_find"></a>adjacent_find</h3><p>查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p><p><code>adjacent_find(iterator beg, iterator end);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = <span class="hljs-built_in">adjacent_find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> (it == v.<span class="hljs-built_in">end</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找不到!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到相邻重复元素为:&quot;</span> &lt;&lt; *it &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="binary-search"><a href="#binary-search" class="headerlink" title="binary_search"></a>binary_search</h3><p>查找指定元素是否存在，查找指定的元素，查到 返回true  否则false，在<strong>无序序列中不可用</strong></p><p><code>bool binary_search(iterator beg, iterator end, value);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">bool</span> ret = <span class="hljs-built_in">binary_search</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(),<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span> (ret)&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到了&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>统计元素出现次数</p><p><code>count(iterator beg, iterator end, value);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> num = <span class="hljs-built_in">count</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">4</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;4的个数为： &quot;</span> &lt;&lt; num &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="count-if"><a href="#count-if" class="headerlink" title="count_if"></a>count_if</h3><p>按条件统计元素个数</p><p><code>count_if(iterator beg, iterator end, _Pred);  </code></p><h2 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>排序</p><p><code>sort(iterator beg, iterator end, _Pred);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//sort默认从小到大排序</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br><br><span class="hljs-comment">//从大到小排序</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), cmp);<br><br>cout &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>容器元素合并，并存储到另一容器中,两个容器必须是<strong>有序的</strong></p><p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator destination);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vtarget</span><span class="hljs-params">(v1.size() + v2.size())</span></span>;<br><span class="hljs-comment">//合并  需要两个有序序列</span><br><span class="hljs-built_in">merge</span>(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), vtarget.<span class="hljs-built_in">begin</span>());<br></code></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>将容器内元素进行反转</p><p><code>reverse(iterator beg, iterator end);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="4-拷贝和替换算法"><a href="#4-拷贝和替换算法" class="headerlink" title="4.拷贝和替换算法"></a>4.拷贝和替换算法</h2><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>容器内指定范围的元素拷贝到另一容器中</p><p><code>copy(iterator beg, iterator end, iterator dest);  </code></p><p> dest目标起始迭代器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; v1;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v1.<span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(v1.size())</span></span>;<br><span class="hljs-built_in">copy</span>(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), v2.<span class="hljs-built_in">begin</span>());<br><br></code></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>将容器内指定范围的旧元素修改为新元素</p><p><code>replace(iterator beg, iterator end, oldvalue, newvalue);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;替换前：&quot;</span> &lt;&lt; endl;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;替换后：&quot;</span> &lt;&lt; endl;<span class="hljs-comment">//将容器中的20 替换成 2000</span><br><span class="hljs-built_in">replace</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">20</span>, <span class="hljs-number">2000</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure><h3 id="replace-if"><a href="#replace-if" class="headerlink" title="replace_if"></a>replace_if</h3><p>将区间内满足条件的元素，替换成指定元素</p><p><code>replace_if(iterator beg, iterator end, _pred, newvalue);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReplaceGreater30</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span>&#123;<br><span class="hljs-keyword">return</span> val &gt;= <span class="hljs-number">30</span>;<br>&#125;<br>&#125;;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;替换前：&quot;</span> &lt;&lt; endl;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><span class="hljs-comment">//将容器中大于等于的30 替换成 3000</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;替换后：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">replace_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">ReplaceGreater30</span>(), <span class="hljs-number">3000</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>互换两个容器的元素</p><p><code>swap(container c1, container c2);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v1.<span class="hljs-built_in">push_back</span>(i);<br>v2.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">100</span>);<br>&#125;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换前： &quot;</span> &lt;&lt; endl;<br>for_each(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>for_each(v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换后： &quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">swap</span>(v1, v2);<br>for_each(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>for_each(v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="5-常用算术生成算法"><a href="#5-常用算术生成算法" class="headerlink" title="5.常用算术生成算法"></a>5.常用算术生成算法</h2><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h3><p>计算区间内 容器元素累计总和</p><p><code>accumulate(iterator beg, iterator end, value);  </code>// value 起始值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-type">int</span> total = <span class="hljs-built_in">accumulate</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;total = &quot;</span> &lt;&lt; total &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>向容器中填充指定的元素</p><p><code>fill(iterator beg, iterator end, value);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-built_in">fill</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">100</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="6-常用集合算法"><a href="#6-常用集合算法" class="headerlink" title="6. 常用集合算法"></a>6. 常用集合算法</h2><h3 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set_intersection"></a>set_intersection</h3><p>求交集的两个集合必须是<strong>有序序列</strong></p><p>目标容器开辟空间需要从<strong>两个容器中取小值</strong></p><p>set_intersection返回值既是交集中最后一个元素的位置</p><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>   &#123;<br>v1.<span class="hljs-built_in">push_back</span>(i);<br>v2.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">5</span>);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; vTarget;<span class="hljs-comment">//取两个里面较小的值给目标容器开辟空间</span><br>vTarget.<span class="hljs-built_in">resize</span>(<span class="hljs-built_in">min</span>(v1.<span class="hljs-built_in">size</span>(), v2.<span class="hljs-built_in">size</span>()));<br><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd = <span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br>   <span class="hljs-built_in">set_intersection</span>(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br><br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure><h3 id="set-union"><a href="#set-union" class="headerlink" title="set_union"></a>set_union</h3><p>求并集的两个集合必须的有序序列</p><p>目标容器开辟空间需要<strong>两个容器相加</strong></p><p>set_union返回值既是并集中最后一个元素的位置</p><p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v1.<span class="hljs-built_in">push_back</span>(i);<br>v2.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">5</span>);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; vTarget;<br><span class="hljs-comment">//取两个容器的和给目标容器开辟空间</span><br>vTarget.<span class="hljs-built_in">resize</span>(v1.<span class="hljs-built_in">size</span>() + v2.<span class="hljs-built_in">size</span>());<br><br><span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd = <br>       <span class="hljs-built_in">set_union</span>(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br><br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure><h3 id="set-difference"><a href="#set-difference" class="headerlink" title="set_difference"></a>set_difference</h3><p>求差集的两个集合必须的有序序列</p><p>目标容器开辟空间需要从<strong>两个容器取较大值</strong></p><p>set_difference返回值既是差集中最后一个元素的位置</p><p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v1.<span class="hljs-built_in">push_back</span>(i);<br>v2.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">5</span>);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; vTarget;<br><span class="hljs-comment">//取两个里面较大的值给目标容器开辟空间</span><br>vTarget.<span class="hljs-built_in">resize</span>( <span class="hljs-built_in">max</span>(v1.<span class="hljs-built_in">size</span>() , v2.<span class="hljs-built_in">size</span>()));<br><br><span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;v1与v2的差集为： &quot;</span> &lt;&lt; endl;<br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd = <br>       <span class="hljs-built_in">set_difference</span>(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;v2与v1的差集为： &quot;</span> &lt;&lt; endl;<br>itEnd = <span class="hljs-built_in">set_difference</span>(v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
